{"help":{"text":"Reads a ndjson logs file and converts it to readable human logs (version 20221212)","expects":[{"name":"file","desc":"The file path to the ndjson log files (either .ndjson or .ndjson.gz)","example":"logs_12345.ndjson.gz","mandatory":false},{"name":"filter","desc":"Comma separated pairs of field value filters (for example: \"field1:abc,field2:xyz\")","example":"field1:abc,field2:xyz","mandatory":false},{"name":"notfilter","desc":"Comma separated pairs of field value not filters (for example: \"field1:abc,field2:xyz\")","example":"field1:abc,field2:xyz","mandatory":false},{"name":"type","desc":"If you want to specify any longer not included by default (for example: AuditLogger)","example":"AuditLogger","mandatory":false},{"name":"icase","desc":"If icase=false then filters will be case sensitive (default: icase=true)","example":"false","mandatory":false},{"name":"inception","desc":"If inception=true it will handle cases where JSON is included in the message field (default: inception=true)","example":"true","mandatory":false}]},"init":{"templateAudit":"{{_time}} [{{$f '%-20.20s' thread_name}}] {{$f '%-5s' level}} {{code}} [{{executionId}}] - {{clientType}}, {{clientVersion}}, {{clientUsername}}, {{remoteIP}}, {{remoteHostname}}, {{clientIP}}, {{clientHostname}}, {{referrer}}, {{username}}, {{sessionId}}, {{activityType}}, {{activityName}}, {{{activityDescr}}}, {{{result}}}, {{errorCode}}, {{{failureDescr}}}, {{operationTime}} {{stack_trace}}","templateRegular":"{{_time}} [{{$f '%-20.20s' thread_name}}] {{$f '%-5s' level}} {{code}} [{{executionId}}] - {{{message}}} {{{stack_trace}}}","templateDefault":"{{_time}} | {{level }} | {{{message}}}"},"todo":["Read ndjson log file"],"ojob":{"sequential":true,"opacks":[{"openaf":20220510}],"catch":"printErr(\"ERROR: \" + exception)\n","logToConsole":false},"jobs":[{"name":"Read ndjson log file","check":{"in":{"file":"isString.default(__)","filter":"isString.default(__)","notfilter":"isString.default(__)","type":"isString.default(__)","icase":"toBoolean.isBoolean.default(true)","inception":"toBoolean.isBoolean.default(true)"}},"exec":"var f;ow.loadTemplate();ow.template.addFormatHelpers();ow.template.addOpenAFHelpers();ow.template.addConditionalHelpers();if(isDef(args.file)&&(args.file.endsWith(\".ndjson\")&&(f=io.readFileStream(args.file)),args.file.endsWith(\".ndjson.gz\")&&(f=io.readFileGzipStream(args.file)),isUnDef(f)))throw\"Can't recognize file '\"+args.file+\"' as a ndjson or ndjson.gz\";var g=ow.template.execCompiled(ow.template.compile(args.init.templateAudit)),h=ow.template.execCompiled(ow.template.compile(args.init.templateRegular)),\nk=ow.template.execCompiled(ow.template.compile(args.init.templateDefault)),e=__;global.wildcardTest=function(c,d,a){a=_$(a).isBoolean().default(!1);d=\"^\"+d.replace(/[.+^${}()|[\\]\\\\]/g,\"\\\\$1\").replace(/\\*/g,\".*\").replace(/\\?/g,\".\")+\"$\";return(new RegExp(d,a?__:\"i\")).test(c)};global.parseLine=function(c){isUnDef(e)&&0!=c.length&&c.trim().startsWith(\"{\")&&(e=\"\");if(isDef(e)){if(0!=c.length&&!c.trim().endsWith(\"}\")){e+=c.trim();return}0<e.length&&(c=e+c,e=__)}if(0==c.length||0<c.length&&\"{\"!=c.trim().substring(0,\n1))isUnDef(args.filter)&&isUnDef(args.notfilter)&&isUnDef(args.type)&&print(c),e=__;else{var d=!0;try{var a=jsonParse(c);args.inception&&isMap(a)&&isString(a.message)&&a.message.startsWith(\"{\")&&a.message.endsWith(\"}\")&&(a=jsonParse(a.message))}catch(b){sprintErr(b)}if(isMap(a)){if(isString(args.filter)&&(0<=args.filter.indexOf(\"*\")||0<=args.filter.indexOf(\"?\")?args.filter.split(\",\").forEach(function(b){b=b.split(\":\");if(isUnDef(a[b[0]])||!global.wildcardTest(a[b[0]],b[1],!args.icase))d=!1}):args.filter.split(\",\").forEach(function(b){b=\nb.split(\":\");if(isUnDef(a[b[0]])||String(a[b[0]])!=String(b[1]))d=!1})),isString(args.notfilter)&&(0<=args.notfilter.indexOf(\"*\")||0<=args.notfilter.indexOf(\"?\")?args.notfilter.split(\",\").forEach(function(b){b=b.split(\":\");isDef(a[b[0]])&&global.wildcardTest(a[b[0]],b[1],!args.icase)&&(d=!1)}):args.notfilter.split(\",\").forEach(function(b){b=b.split(\":\");isDef(a[b[0]])&&String(a[b[0]])==String(b[1])&&(d=!1)})),isDef(args.type)&&a.logger_name!=args.type&&(d=!1),isUnDef(args.type)&&\"AuditLogger\"==a.logger_name&&\n(d=!1),d)switch(isString(a[\"@timestamp\"])&&0<a[\"@timestamp\"].indexOf(\"T\")&&0<a[\"@timestamp\"].indexOf(\".\")&&a[\"@timestamp\"].endsWith(\"Z\")&&(a[\"@timestamp\"]=ow.format.toDate(a[\"@timestamp\"],\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")),a.logger_name){case \"AuditLogger\":try{a._time=ow.format.fromDate(new Date(isDef(a.parse_timestamp)?a.parse_timestamp:a[\"@timestamp\"]),\"yyyy-MM-dd HH:mm:ss,SSS\")}catch(b){a._time=a.parse_timestamp}a.thread_name=a.thread_name.substr(-20);print(g(a));break;default:try{if(isUnDef(a.code)||\nisUnDef(a.thread_name)){try{a._time=ow.format.fromDate(new Date(isDef(a.parse_timestamp)?a.parse_timestamp:a[\"@timestamp\"]),\"yyyy-MM-dd HH:mm:ss,SSS\")}catch(b){a._time=a.parse_timestamp}isDef(a.thread_name)&&(a.message=\"[\"+a.thread_name+\"] \"+a.message);print(k(a))}else{try{a._time=ow.format.fromDate(new Date(isDef(a.parse_timestamp)?a.parse_timestamp:a[\"@timestamp\"]),\"yyyy-MM-dd HH:mm:ss,SSS\")}catch(b){a._time=a.parse_timestamp}a.thread_name=a.thread_name.substr(-20);print(h(a))}}catch(b){printErr(\"ERROR | \"+\nb+\" | record = \"+af.toSLON(a))}}}else isUnDef(args.filter)&&isUnDef(args.notfilter)&&isUnDef(args.type)&&print(a)}};isDef(args.file)?(ioStreamReadLines(f,global.parseLine,\"\\n\"),f.close()):io.pipeLn(global.parseLine)"}]}