# Author: Nuno Aguiar
help:
  text   : Reads a ndjson logs file and converts it to readable human logs (version 20221212a)
  expects:
  - name     : file
    desc     : "The file path to the ndjson log files (either .ndjson or .ndjson.gz)"
    example  : logs_12345.ndjson.gz
    mandatory: false
  - name     : folder
    desc     : "The folder path to the ndjson log files (either .ndjson or .ndjson.gz). Will convert one by one into .log files."
    example  : /some/path
    mandatory: false
  - name     : filter
    desc     : "Comma separated pairs of field value filters (for example: \"field1:abc,field2:xyz\")"
    example  : field1:abc,field2:xyz
    mandatory: false
  - name     : notfilter
    desc     : "Comma separated pairs of field value not filters (for example: \"field1:abc,field2:xyz\")"
    example  : field1:abc,field2:xyz
    mandatory: false
  - name     : type
    desc     : "If you want to specify any longer not included by default (for example: AuditLogger)"
    example  : AuditLogger
    mandatory: false
  - name     : icase
    desc     : "If icase=false then filters will be case sensitive (default: icase=true)"
    example  : "false"
    mandatory: false
  - name     : inception
    desc     : "If inception=true it will handle cases where JSON is included in the message field (default: inception=true)"
    example  : "true"
    mandatory: false
  - name     : injson
    desc     : "Boolean to determine if output should be in JSON format"
    example  : "true"
    mandatory: false

init:
  templateAudit  : "{{_time}} [{{$f '%-20.20s' thread_name}}] {{$f '%-5s' level}} {{code}} [{{executionId}}] - {{clientType}}, {{clientVersion}}, {{clientUsername}}, {{remoteIP}}, {{remoteHostname}}, {{clientIP}}, {{clientHostname}}, {{referrer}}, {{username}}, {{sessionId}}, {{activityType}}, {{activityName}}, {{{activityDescr}}}, {{{result}}}, {{errorCode}}, {{{failureDescr}}}, {{operationTime}} {{stack_trace}}"
  templateRegular: "{{_time}} [{{$f '%-20.20s' thread_name}}] {{$f '%-5s' level}} {{code}} [{{executionId}}] - {{{message}}} {{{stack_trace}}}"
  templateDefault: "{{_time}} | {{level }} | {{{message}}}"

todo:
- Init
- Main process

ojob:
  sequential  : true
  opacks      :
  - openaf: 20220510
  catch       : |
    printErr("ERROR: " + exception)
  logToConsole: false   # to change when finished

jobs:
# -----------
- name : Init
  exec : | 
    ow.loadTemplate()
    ow.template.addFormatHelpers()
    ow.template.addOpenAFHelpers()
    ow.template.addConditionalHelpers()

    // Wildcard test
    global.wildcardTest = (str, pattern, caseSensitive) => {
      caseSensitive = _$(caseSensitive).isBoolean().default(false)
      var w = "^" + pattern.replace(/[.+^${}()|[\]\\]/g, '\\$1').replace(/\*/g, '.*').replace(/\?/g, '.') + "$"
      return (new RegExp(w, (caseSensitive ? __ : 'i'))).test(str)
    }

    // Print func
    global._p = (txt, s) => isDef(s) ? ioStreamWrite(s, txt + "\n") : print(txt)

# -------------------
- name : Parse ndjson
  deps : Init
  catch: sprintErr(exception)
  check:
    in:
      file     : isString.default(__)
      output   : isString.default(__)
      filter   : isString.default(__)
      notfilter: isString.default(__)
      type     : isString.default(__)
      icase    : toBoolean.isBoolean.default(true)
      inception: toBoolean.isBoolean.default(true)
      injson   : toBoolean.isBoolean.default(false)
  exec : |
    var is = __, os = __, metrics = {
      auditLines: 0,
      regularLines: 0,
      defaultLines: 0,
      origLines: 0,
      filteredLines: 0,
      convertedLines: 0,
      nonJson: 0,
      multiLine: 0
    }

    if (isDef(args.file)) {
      if (args.file.endsWith(".ndjson"))    is = io.readFileStream(args.file)
      if (args.file.endsWith(".ndjson.gz")) is = io.readFileGzipStream(args.file)

      if (isUnDef(is)) throw "Can't recognize file '" + args.file + "' as a ndjson or ndjson.gz"
    }

    // Compile templates
    var tmplAudit   = ow.template.execCompiled(ow.template.compile(args.init.templateAudit))
    var tmplRegular = ow.template.execCompiled(ow.template.compile(args.init.templateRegular))
    var tmplDefault = ow.template.execCompiled(ow.template.compile(args.init.templateDefault))

    if (isDef(args.output)) {
      if (!args.output.endsWith(".gz"))
        os = io.writeFileStream(args.output)
      else
        os = io.writeFileGzipStream(args.output)
    }

    if (args.injson && isUnDef(args.__format)) args.__format = "json"

    var buf = __
    var parseLine = (line, os) => {
      line = String(line)
      metrics.origLines++
      if (isUnDef(buf) && line.length != 0 && line.trim().startsWith("{")) buf = ""
      if (isDef(buf)) {
        if (line.length != 0 && !line.trim().endsWith("}")) { buf += line.trim(); metrics.multiLine++; return }
        if (buf.length > 0) { line = buf + line; buf = __ }
      }
      if (line.length == 0 || line.length > 0 && line.trim().substring(0, 1) != "{") { 
        if (isUnDef(args.filter) && isUnDef(args.notfilter) && isUnDef(args.type) && !args.injson) global._p(line, os) 
        buf = __
        metrics.nonJson++
        return 
      }

      var data, go = true
      try { 
        data = jsonParse(line)
        // Test for "inception"
        if (args.inception && isMap(data) && isString(data.message) && data.message.startsWith("{") && data.message.endsWith("}")) data = jsonParse(data.message)
      } catch(e) { 
        sprintErr(e) 
      }
      if (!isMap(data)) { if (isUnDef(args.filter) && isUnDef(args.notfilter) && isUnDef(args.type) && !args.injson) global._p(data, os); return }
      if (isString(args.filter)) {
        if (args.filter.indexOf("*") >= 0 || args.filter.indexOf("?") >= 0) {
          args.filter.split(",").forEach(f => {
            var ar = f.split(":")
            if (isUnDef(data[ar[0]]) || !global.wildcardTest(data[ar[0]], ar[1], !args.icase) ) go = false
          })
        } else {
          args.filter.split(",").forEach(f => {
            var ar = f.split(":")
            if (isUnDef(data[ar[0]]) || String(data[ar[0]]) != String(ar[1])) go = false
          })
        }
      }
      if (isString(args.notfilter)) {
        if (args.notfilter.indexOf("*") >= 0 || args.notfilter.indexOf("?") >= 0) {
          args.notfilter.split(",").forEach(f => {
            var ar = f.split(":")
            if (isDef(data[ar[0]]) && global.wildcardTest(data[ar[0]], ar[1], !args.icase) ) go = false
          })
        } else {
          args.notfilter.split(",").forEach(f => {
            var ar = f.split(":")
            if (isDef(data[ar[0]]) && String(data[ar[0]]) == String(ar[1])) go = false
          })
        }
      }

      if (isDef(args.type) && data.logger_name != args.type) go = false 
      if (isUnDef(args.type) && data.logger_name == "AuditLogger") { metrics.auditLines++; go = false }

      if (go) {
        if (isString(data["@timestamp"]) && data["@timestamp"].indexOf("T") > 0 && data["@timestamp"].indexOf(".") > 0 && data["@timestamp"].endsWith("Z")) data["@timestamp"] = ow.format.toDate(data["@timestamp"], "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")
        switch(data.logger_name) {
        case "AuditLogger":
          try { data._time = ow.format.fromDate(new Date(isDef(data.parse_timestamp) ? data.parse_timestamp : data["@timestamp"]), "yyyy-MM-dd HH:mm:ss,SSS") } catch(e2) { data._time = data.parse_timestamp }
          data.thread_name = data.thread_name.substr(-20)
          if (args.injson) 
            ow.oJob.output(data, args)
          else 
            global._p(tmplAudit(data), os)
          metrics.auditLines++
          metrics.convertedLines++
          break;
        default           :
          try {
            if (isUnDef(data.code) || isUnDef(data.thread_name)) {
              try { data._time = ow.format.fromDate(new Date(isDef(data.parse_timestamp) ? data.parse_timestamp : data["@timestamp"]), "yyyy-MM-dd HH:mm:ss,SSS") } catch(e2) { data._time = data.parse_timestamp }
              if (isDef(data["thread_name"])) data.message = "[" + data["thread_name"] + "] " + data.message
              if (args.injson) 
                ow.oJob.output(data, args)
              else 
                global._p(tmplDefault(data), os)
              metrics.defaultLines++
              metrics.convertedLines++
            } else {
              try { data._time = ow.format.fromDate(new Date(isDef(data.parse_timestamp) ? data.parse_timestamp : data["@timestamp"]), "yyyy-MM-dd HH:mm:ss,SSS") } catch(e2) { data._time = data.parse_timestamp }
              data.thread_name = data.thread_name.substr(-20)
              if (args.injson) 
                ow.oJob.output(data, args)
              else 
                global._p(tmplRegular(data), os)
              metrics.regularLines++
              metrics.convertedLines++
            }
          } catch(e) {
            printErr("ERROR | " + e + " | record = " + af.toSLON(data))
          }
        }
      } else {
        metrics.filteredLines++
      }
    }

    if (isDef(args.file)) {
      ioStreamReadLines(is, line => parseLine(line, os), "\n")
      is.close()
      if (isDef(os)) os.close()
      $set("metrics_" + args.file, metrics)
    } else {
      io.pipeLn(parseLine)
    } 

# -------------------
- name : Main process
  deps : Init
  check:
    in:
      file     : isString.default(__)
      folder   : isString.default(__)
  exec : |
    if (isDef(args.folder)) {
      if (io.fileExists(args.folder)) {
        tlog("Finding .ndjson.gz and .ndjson files in '{{folder}}'...", args)

        $ch("data").create()

        var tasks = []
        $from( listFilesRecursive(args.folder) )
        .equals("isFile", true)
        .ends("filename", ".ndjson")
        .orEnds("filename", ".ndjson.gz")
        .pselect(f => {
          f.target   = f.filepath.replace(/\.ndjson(.gz)?$/, ".log$1")
          f.sizeAbbr = ow.format.toBytesAbbreviation(f.size)
          tlog("Converting {{filepath}} ({{sizeAbbr}}) to {{target}}...", f)

          $job("Parse ndjson", merge(args, {
            output   : f.target,
            file     : f.filepath
          }))

          var targetInfo      = io.fileInfo(f.target)
          targetInfo.sizeAbbr = ow.format.toBytesAbbreviation(targetInfo.size)

          var metrics = $get("metrics_" + f.filepath)
          $ch("data").set({ canonicalPath: f.canonicalPath }, {
            source       : f.filepath,
            sourceSize   : f.sizeAbbr,
            "#source"    : metrics.origLines,
            target       : f.target,
            targeSize    : targetInfo.sizeAbbr,
            "#filtered"  : metrics.filteredLines,
            "#nonJson"   : metrics.nonJson,
            "#multiLine" : metrics.multiLine,
            "#target"    : metrics.convertedLines
          })
          tlog("Converted {{filepath}}", f)
        })

        $doWait($doAll(tasks))

        args.__format = _$(args.__format).default("table")
        print("")
        ow.oJob.output($from($ch("data").getAll()).sort("source").select(), args)
      } else {
        tlogErr("Folder '{{folder}}' not found.", args)
      }
    } else {
      $job("Parse ndjson", args)
    }


