# Author: Nuno Aguiar
help:
  text   : Acts as a proxy between Docker and AWS ECR
  expects: 
  - name     : ecr
    desc     : The ECR to use
    example  : 123456789012.dkr.ecr.us-east-1.amazonaws.com
    mandatory: true
  - name     : region
    desc     : The region to use
    example  : us-east-1
    mandatory: false
  - name     : accessKey
    desc     : The AWS access key
    example  : AKIAIOSFODNN7EXAMPLE
    mandatory: false
  - name     : secretKey
    desc     : The AWS secret key
    example  : wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
    mandatory: false
  - name     : assumeRole
    desc     : The role to assume
    example  : arn:aws:iam::123456789012:role/demo
    mandatory: false

todo:
- (httpdStart  ): 8080
- (httpdService): 8080
  ((uri       )): /
  ((execURI   )): | #js
    return stringify(request,__,"")
- (httpdMetrics): 8080
  ((uri       )): /metrics
- (httpdService): 8080
  ((uri       )): /v2
  ((error     )): true
  ((execURI   )): | #js
    try {
      // Check if first request
      if (isUnDef(global.__notFirst)) {
        // Cache AWS ECR credentials
        $cache("aws")
        .ttl(3000 * 1000)
        .fn(k => {
          log("Creating AWS ECR client connection.")
          var _aws = new AWS(args.accessKey, args.secretKey, __, args.region)
          if (isDef(args.assumeRole)) {
            log("Assuming role " + args.assumeRole + "...")
            _aws = _aws.assumeRole(args.assumeRole)
          }
          return _aws
        })
        .create()

        // Cache AWS ECR token
        $cache("authToken")
        .ttl(3600 * 1000)
        .fn(k => {
          var _aws = $cache("aws").get({})
          log("Creating AWS ECR authorization token.")
          var _t = _aws.ECR_GetAuthorizationToken(args.region)
          var _creds = ow.format.fromBase64(_t.authorizationToken).split(":")
          return merge(_t, { username: _creds[0], password: _creds[1] })
        })
        .create()

        // Cache AWS ECR ListImages
        $cache("listImages")
        .ttl(_$(args.cache, "cache").isNumber().default(15 * 1000))
        .fn(k => {
          var _aws = $cache("aws").get({})
          log("Listing repositories...")
          return _aws.ECR_ListImages(k.region, k.repo)
        })
        .create()

        // Cache AWS ECR DescribeRepositories
        $cache("describeRepo")
        .ttl(_$(args.cache, "cache").isNumber().default(15 * 1000))
        .fn(k => {
          var _aws = $cache("aws").get({})
          log("Listing repositories...")
          return _aws.ECR_DescribeRepositories(k.region)
        })
        .create()

        global.__notFirst = true
      }

      var aws = $cache("aws").get({})

      // Handle /tags/list
      if (request.uri.endsWith("/tags/list")) {
        var _r = request.uri.match(/\/v2\/(.+)\/tags\/list$/)
        var repo = _r[1]
        log("Listing tags for " + repo + "...")
        var res = $cache("listImages").get({ region: args.region, repo: repo })
        var _r = ow.server.httpd.reply({
          name: repo,
          tags: res.map(r => r.imageTag).filter(isDef).map(r => String(r))
        })
        res = __

        return _r
      } else if (request.uri.endsWith("/_catalog")) {
        // Handle /_catalog
        
        var res = $cache("describeRepo").get({ region: args.region })
        var _r = ow.server.httpd.reply({
          repositories: res.map(r => r.repositoryName).filter(isDef)
        })
        res = __

        return _r
      } else {
        // If ping answer immediately
        if (request.uri.endsWith("/v2/") || request.uri.endsWith("/v2")) {
          return ow.server.httpd.reply({ status: "OK" })
        }

        var _creds = $cache("authToken").get({})

        // Create a new HTTP client if not already created
        if (isUnDef(global._hs)) {
          log("Creating HTTP client connection...")
          ow.loadObj()
          global.hs = new ow.obj.http()
          var clt = new Packages.okhttp3.OkHttpClient.Builder()
          clt = clt.followSslRedirects(false)
          clt = clt.followRedirects(false)
          global.hs.client = clt.build()
        }

        var isBlob = request.uri.indexOf("/blobs/") > 0

        var _r = $rest({
          httpClient: global.hs,
          login: _creds.username, 
          pass: _creds.password,
          requestHeaders: merge(isBlob ? {} : request.header, { 
            Host: _creds.proxyEndpoint.replace(/https?:\/\//,"")
          })
        }).get(_creds.proxyEndpoint + request.uri)

        var _hdrs = hs.responseHeaders()
        var _mime = isBlob ? "application/octet-stream" : "application/vnd.docker.distribution.manifest.v2+json, application/vnd.oci.image.index.v1+json, application/vnd.docker.distribution.manifest.list.v2+json"
        delete _hdrs["content-length"]
        delete _hdrs["sizes"]
        delete _hdrs["content-type"]
        delete _hdrs["transfer-encoding"]
        _hdrs["X-Content-Type-Options"] = "nosniff"
        _hdrs["Docker-Content-Digest"] = "sha256:" + sha256(stringify(_r, __, ""))
        _hdrs["Etag"] = '"' + _hdrs["Docker-Content-Digest"] + '"'

        if (isBlob && isDef(_hdrs["location"])) {
          return ow.server.httpd.reply($rest().get(_hdrs["location"]))
        }
        return ow.server.httpd.reply(_r, 200, _mime, _hdrs)
      }
    } catch(ee) {
      logErr(ee)
    }

    return stringify(request, __, "")

ojob:
  opacks      :
  - openaf: 20240812
  - AWS: 20240822
  - oJob-common
  catch       : printErrnl("[" + job.name + "] "); if (isDef(exception.javaException)) exception.javaException.printStackTrace(); else printErr(exception)
  logToConsole: true   # to change when finished
  daemon      : true
  argsFromEnvs: true
  loadLibs    :
  - aws.js

include:
- oJobHTTPd.yaml

# jobs:
# # --------------------------
# - name : Docker proxy to ECR
#   check:
#     in:
#       ecr       : isString
#       region    : isString.default(__)
#       accessKey : isString.default(__)
#       secretKey : isString.default(__)
#       assumeRole: isString.default(__)
#   to   :
#   - ojob debug
#   exec : | #js
#     //
