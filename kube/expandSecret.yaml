# Author: Nuno Aguiar
help:
  text   : Given a YAML with a Kubernetes secret based on files it will decode the base 64 content and write the corresponding files to the filesystem
  expects: 
  - name     : input
    desc     : The Kubernetes secret YAML file
    example  : mySecret.yaml
    mandatory: false
  - name     : file
    desc     : If defined it will only retrive the provided file
    example  : mycert.crt
    mandatory: false
  - name     : toFolder
    desc     : If defined will place the decode files in the provided folder
    example  : output
    mandatory: false

todo:
- Decode Kubernetes secret

ojob:
  opacks      :
  - openaf: 20230704
  catch       : printErrnl("[" + job.name + "] "); if (isDef(exception.javaException)) exception.javaException.printStackTrace(); else printErr(exception)
  logToConsole: true   # to change when finished
        

jobs:
# ------------------
- name : Decode file
  check:
    contents: isString
    file    : isString
    toFolder: isString
  catch: printErr(exception + " | " + af.toSLON(exception))
  exec : |
    tlog("Writing to {{toFolder}}/{{file}}...", args)
    io.mkdir(args.toFolder)
    var _b = af.fromBase64(args.contents)
    var os = io.writeFileStream(args.toFolder + "/" + args.file)
    ioStreamWriteBytes(os, _b)

# -------------------------------
- name : Decode Kubernetes secret
  check:
    in:
      input   : isString.default(__)
      file    : isString.default(__)
      toFolder: isString.default(".")
  each : Decode file
  exec : |
    var secret
    if (isDef(args.input)) {
      secret = io.readFileYAML(args.input)
    } else {
      var data = ""
      io.pipeLn(line => { data += line + "\n"; return false })
      secret = af.fromYAML(data)
    }

    if (isUnDef(secret) || !(secret.kind == "Secret")) throw "YAML file '" + args.input + "' doesn't seem to be a K8S secret."

    if (isDef(args.file)) {
      if (isDef(secret.data) && isDef(secret.data[args.file])) {
        each({ contents: secret.data[args.file], file: args.file, toFolder: args.toFolder })
      } else {
        throw "Didn't find data for file '" + args.file + "'"
      }
    } else {
      if (isMap(secret.data)) {
        Object.keys(secret.data).forEach(file => each({ contents: secret.data[file], file: file, toFolder: args.toFolder }))
      } else {
        throw "No secret data found in file '" + args.file + "'"
      }
    }