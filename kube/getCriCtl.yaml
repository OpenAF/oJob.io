# Author: Nuno Aguiar
help:
  text   : Retrieves the CriCtl utility
  expects: 
  - name     : path
    desc     : Where the binary should be installed
    example  : .
    mandatory: false
  - name     : os
    desc     : Force the operating system (e.g. windows, linux, darwin)
    example  : linux
    mandatory: false
  - name     : arch
    desc     : Force the architecture (e.g. armv5, armv6, armv7, aarch64, x86_64, x86, i686)
    example  : x86_64
    mandatory: false    

todo:
- Get CriCtl binary

ojob:
  opacks      :
  - openaf: 20231222
  catch       : printErrnl("[" + job.name + "] "); if (isDef(exception.javaException)) exception.javaException.printStackTrace(); else printErr(exception)
  logToConsole: true   # to change when finished
        

jobs:
# ------------------------
- name : Get CriCtl binary
  check:
    in:
      path: isString.default(".")
      os  : isString.default(__)
      arch: isString.default(__)
  exec : |
    // Check OS and arch
    var os, arch
    if (isDef(args.os)) {
      os = args.os
    } else {
      os = ow.format.isWindows() ? "windows" : $sh("echo `uname`|tr '[:upper:]' '[:lower:]'").get(0).stdout.trim()
    }
    if (isDef(args.arch)) {
      arch = args.arch
    } else {
      arch = $sh("uname -m").get(0).stdout.trim()
    }

    if (arch.startsWith("armv5")) throw arch + " not supported"
    if (arch.startsWith("armv6")) throw arch + " not supported"
    if (arch.startsWith("armv7")) throw arch + " not supported"
    if (arch == "aarch64") arch = "arm64"
    if (arch == "x86") arch = "386"
    if (arch == "x86_64") arch = "amd64"
    if (arch == "i686") arch = "386"
    if (arch == "i386") arch = "386"

    // Get the tgz
    var rels = $rest().get("https://api.github.com/repos/kubernetes-sigs/cri-tools/releases")
    var version = $from(rels).equals("draft", false).equals("prerelease", false).sort("-published_at").at(0).tag_name
    var tmp = io.createTempFile("crictl_", ".tgz")
    var url = "https://github.com/kubernetes-sigs/cri-tools/releases/latest/download/crictl-" + version + "-" + os + "-" + arch + ".tar.gz"
    log("Downloading " + url + "...")
    $rest().get2File(tmp, url)

    var is = Packages.org.apache.commons.compress.archivers.tar.TarArchiveInputStream(io.readFileGzipStream(tmp))
    var _e = is.getNextTarEntry()
    while(_e != null && String(_e.getName()).replace(/^.+\//, "") != "crictl") _e = is.getNextTarEntry()
    if (_e != null) {
      log("Writing " + args.path + "/crictl...")
      ioStreamCopy(io.writeFileStream(args.path + "/crictl"), is)
      $sh("chmod u+x " + args.path + "/crictl").exec()
    } else
      throw("Can't find 'crictl' utility in downloaded version")
