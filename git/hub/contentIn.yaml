# Author: Nuno Aguiar
help: 
  text   : Tries to put files in the GitHub repository (requires GitHub cli)
  expects: 
  - name     : message
    desc     : The commit message to use
    example  : "updates"
    mandatory: false
  - name     : branch
    desc     : The branch associated with the pull request, if needed
    example  : "my-branch"
    mandatory: false
  - name     : branchPrefix
    desc     : The branch prefix to use for pull request, if needed
    example  : "auto-"
    mandatory: false
  - name     : paths
    desc     : A command delimited list of paths to check in (if not provided defaults to ".")
    example  : "src,tests"
    mandatory: false
  - name     : title
    desc     : The pull request title, if needed (you can use {{date}} and {{time}} to refer to the current time)
    example  : "Updates PR"
    mandatory: false
  - name     : body
    desc     : The text to include in the body of the pull request, if needed
    example  : "automated PR"
    mandatory: false
  - name     : bodyFile
    desc     : In alternative of 'body' from a markdown file to include in the body of the pull request, if needed
    example  : "body.md"
    mandatory: false
  - name     : dontDelete
    desc     : Don't try to automatically delete the created branch.
    example  : "true"
    mandatory: false
  - name     : forcePR
    desc     : Force the creation of a PR
    example  : "true"
    mandatory: false

ojob:
  opacks      :
  - openaf: 20230704
  catch       : logErr(exception)
  logToConsole: true  

todo:
- GitHub Content In 

jobs:
# --------------------------
- name : GitHub Push Content
  check:
    in:
      repo      : isString.default(getEnv("GITHUB_REPOSITORY"))
      file      : isString
      message   : isString
      branch    : isString,
      mainBranch: isString,
      delete    : isBoolean.default(false)
  catch: logErr(exception)
  exec : |
    _$(args.repo, "repo").$_()

    args._sha = ""
    var res = {}
    args.file = args.file.replace(/^\.\//, "")

    // It's different
    _r = $sh("git rev-parse " + args.branch + ":" + args.file).get(0)
    if (_r.exitcode == 0) {
      // Exists
      args._sha = "--field sha=\"" + _r.stdout.trim() + "\""
    } else {
      if (io.fileExists(args.file)) args._sha = "--field sha=\"" + sha1(io.readFileStream(args.file)) + "\""
    }

    // Try to put
    if (args.delete) {
      res = $sh(templify("gh api --method DELETE --silent /repos/{{repo}}/contents/{{file}} --field message=\"{{message}}\" {{{_sha}}} --field branch=\"{{branch}}\" ", args))
            .get(0)
    } else {
      args.efile = io.createTempFile("git",".file")
      io.writeFileBytes(args.efile, af.toBase64Bytes(io.readFileBytes(args.file)))
      res = $sh(templify("gh api --method PUT /repos/{{repo}}/contents/{{file}} --field message=\"{{message}}\" {{{_sha}}} --field encoding=\"base64\" --field branch=\"{{branch}}\" --field content=@{{efile}}", args))
            .get(0)
    }
    if (res.exitcode == 0) {
      if (args.delete) {
        global.cd.inc()
      } else {
        global.c.inc()
      }
    } else {
      logWarn(af.toSLON(res))
    }
    
    return res

# ------------------------
- name : GitHub Content In 
  catch: |
    logErr(exception)
    exit(-1)
  check:
    in:
      message     : isString.default("updates")
      branch      : isString.default(__)
      paths       : isString.default(".")
      branchPrefix: isString.default("")
      dontDelete  : toBoolean.isBoolean.default(false)
      forcePR     : toBoolean.isBoolean.default(false)
  exec : |
    args.endInError = false
    global.c = $atomic()
    global.cd = $atomic()

    // Determines if there is anything to commit
    if (args.paths != ".") {
      args.paths.split(",").forEach(p => $sh("git add " + p).exec())
    }
    global.res = $sh("git status --porcelain").get(0).stdout

    // Determines if there is anything to commit
    var lstDelete = [], lstPut = []
    global.res = global.res.split("\n").map(l => {
      var _l
      if (args.paths != ".") {
        args.paths.split(",").forEach(p => {
          if (l.indexOf(" " + p) >= 0) _l = l
        })
      } else {
        _l = l
      }

      var _i = l.replace(/^.. /, "")
      if (l.indexOf("D ") < 0 && l.indexOf("R ") < 0) {
        lstPut.push(_i)
        return _i
      } else {
        if (l.indexOf("R ") >= 0) {
          var _ar = _i.split("->").map(r => r.trim())
          lstDelete.push(_ar[0])
          lstPut.push(_ar[1])
        } else {
          lstDelete.push(_i)
          return __
        }
      }
    }).filter(r => isDef(r)).join("\n")

    // Filter arrays for empty entries
    lstPut    = lstPut.filter(r => r.length > 0)
    lstDelete = lstDelete.filter(r => r.length > 0)

    if (lstPut.length > 0 || lstDelete.length > 0) {
      // Determine current branch
      var _cBranch = $sh("git branch --show-current").get(0).stdout.trim()
      var cBranch
      if (isUnDef(args.branch)) {
        args.branch = _cBranch
        cBranch = args.branch
        args.mainBranch = cBranch
        log("Identified branch: " + args.branch)
      } else {
        args.mainBranch = _cBranch
        cBranch = _cBranch
      }
      log("Current branch: " + _cBranch)

      var _r
      var send = () => {
        args.paths.split(",").forEach(p => {
          if (io.fileExists(p)) {
            if (io.fileInfo(p).isDirectory) {
              listFilesRecursive(p).forEach(pp => {
                if (pp.isFile && lstPut.indexOf(pp.filepath.replace(p + "/", "")) >= 0) {
                  args.delete = false
                  _r = $job("GitHub Push Content", merge(args, { file: pp.filepath }))
                  if (isDef(_r.exitcode) && _r.exitcode != 0) {
                    args.endInError = true
                  }
                }
              })
            } else {
              // isFile
              if (lstPut.indexOf(p) >= 0) {
                args.file = p
                args.delete = false
                log(" put " + args.file + "...")
                _r = $job("GitHub Push Content", args)
                if (isDef(_r.exitcode) && _r.exitcode != 0) {
                  args.endInError = true
                }
              }
            }
          }
          lstDelete.forEach(pd => {
            var _p = p.replace(/^\.\//, "")
            if (pd.indexOf(_p) >= 0) {
              args.file = pd
              args.delete = true
              log(" delete " + args.file + "...")
              _r = $job("GitHub Push Content", args)
              if (isDef(_r.exitcode) && _r.exitcode != 0) {
                args.endInError = true
              }
            }
          })
        })  
      }

      var _now  = { now: new Date() }
      _now.date = ow.format.fromDate(_now.now, "yyyyMMdd")
      _now.time = ow.format.fromDate(_now.now, "HHmmss")

      if (!args.forcePR) send()
      if (args.endInError || args.forcePR) {
        // try to create a pull request
        args.endInError = false

        logWarn("Couldn't commit directly. Trying to create a pull request...")
        args.branch = args.branchPrefix + _now.date + "-" + _now.time

        // Trying to create branch and put
        log("Creating branch '" + args.branch + "' and trying to put changes to it...")
         _r = $sh("git checkout -b " + args.branch)
              .sh("git push --set-upstream origin " + args.branch)
              .sh("git push origin " + args.branch)
              .prefix("git")
              .get()

        send()
        if (!args.endInError) {
          if (isUnDef(args.title)) {
            args.title = args.branch
          } else {
            args.title = $t(args.title, _now)
          }
          args.body = (isDef(args.bodyFile) ? "-F " + args.bodyFile : (isDef(args.body) ? "--body \"" + args.body + "\"" : "--body \"Automatic pull request for branch '" + args.branch + "'\"") )
          _r = $sh("gh pr create --title \"" + args.title + "\" " + args.body + " --base \"" + cBranch + "\" --head \"" + args.branch + "\"")
               .get(0)

          if (_r.exitcode != 0) {
            logErr("Couldn't create pull request '" + args.title + "'!: " + af.toSLON(_r))
            args.endInError = !args.dontDelete
          } else {
            // Trying to merge and close pull request
            var pr_id = _r.stdout.trim()
            log("Created pull request " + pr_id + ". Trying to merge it...")
            _r = $sh("gh pr merge \"" + pr_id + "\" -d -m --auto")
                 .prefix("gh")
                 .get(0)
            
            if (_r.exitcode != 0) {
              logWarn("Couldn't merge pull request " + pr_id + ": " + af.toSLON(_r))
              logWarn("Keeping pull request #" + pr_id + " and branch '" + args.branch + "' for human review.")
              args.dontDelete = true
            } else {
              log("Pull request " + pr_id + " was succesfully merged.")
            }
          }
        }

        if (!args.dontDelete) {
           $sh("git checkout " + cBranch)
           .sh("git branch -D " + args.branch)
           .sh("git push origin --delete " + args.branch)
           .prefix("git")
           .get()
        }
      }
    
    } else {
      log("Nothing to update.")
    }

    if (args.endInError) 
      throw("Content in not successfull")
    else {
      log("Put done for #" + global.c.get() + " files.")
      log("Delete done for #" + global.cd.get() + " files.")
    }
