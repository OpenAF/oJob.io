# Author: Nuno Aguiar
help:
  text   : Prints a cheatsheet with Mermaids charts

ojob:
  opacks:
    openaf: 20250315
  logToConsole: true

todo:
- (printmd): |

    # Mermaid cheat sheet
     
    | Type | Link | Example |
    |------|------|---------|
    | Flowchart | https://mermaid.js.org/syntax/flowchart.html | [Flowchart example](#flowchart-example) |
    | Sequence Diagram | https://mermaid.js.org/syntax/sequenceDiagram.html | [Sequence Diagram](#sequence-diagram) |
    | Class Diagram | https://mermaid.js.org/syntax/classDiagram.html | [Class Diagram](#class-diagram) |
    | State Diagram | https://mermaid.js.org/syntax/stateDiagram.html | [State Diagram](#state-diagram) |
    | Entity Relationship Diagram | https://mermaid.js.org/syntax/entityRelationshipDiagram.html | [Entity Diagram](#entity-diagram) |
    | User Journey | https://mermaid.js.org/syntax/userJourney.html | [User Journey](#user-journey) |
    | Gantt | https://mermaid.js.org/syntax/userJourney.html | [Gantt chart](#gantt-chart) |
    | Pie Chart | https://mermaid.js.org/syntax/pie.html | [Pie Chart](#pie-chart) |
    | Quadrant Chart | https://mermaid.js.org/syntax/quadrantChart.html | [Quadrant Chart](#quadrant-chart) |
    | Requirement Diagram | https://mermaid.js.org/syntax/requirementDiagram.html | [Requirement Diagram](#requirement-diagram) |
    | Gitgraph Diagram | https://mermaid.js.org/syntax/gitgraph.html | [GitGraph Diagram](#gitgraph-diagram) |
    | C4 Diagram | https://mermaid.js.org/syntax/c4.html | |
    | Mindmap | https://mermaid.js.org/syntax/mindmap.html | [Mindmap](#mindmap-example) |
    | Timeline | https://mermaid.js.org/syntax/timeline.html | [Timeline](#timeline-example) | 
    | ZenUML | https://mermaid.js.org/syntax/zenuml.html |  |
    | Sankey | https://mermaid.js.org/syntax/sankey.html | [Sankey](#sankey-example) |
    | XY Chart | https://mermaid.js.org/syntax/xyChart.html | [XY Chart](#xy-chart) |
    | Block diagram | https://mermaid.js.org/syntax/block.html | [Block example](#block-example) |
    | Packet | https://mermaid.js.org/syntax/packet.html | [Packet example](#packet-example) |
    | Kanban | https://mermaid.js.org/syntax/kanban.html | [Kanban example](#kanban-example) |
    | Architecture | https://mermaid.js.org/syntax/architecture.html | [Architecture example](#architecture-example) |
    | Other | https://mermaid.js.org/syntax/examples.html | |

    ## Flowchart example

    ```mermaid
    flowchart TD
        A[Start] --> B{Is it?}
        B -- Yes --> C[OK]
        C --> D[Rethink]
        D --> B
        B -- No ----> E[End]
    ```

    ## Sequence Diagram

    ```mermaid
    sequenceDiagram
        par Alice to Bob
            Alice->>Bob: Go help John
        and Alice to John
            Alice->>John: I want this done today
            par John to Charlie
                John->>Charlie: Can we do this today?
            and John to Diana
                John->>Diana: Can you help us today?
            end
        end
    ```

    ## Class Diagram

    ```mermaid
    ---
    title: Animal example
    ---
    classDiagram
        note "From Duck till Zebra"
        Animal <|-- Duck
        note for Duck "can fly\ncan swim\ncan dive\ncan help in debugging"
        Animal <|-- Fish
        Animal <|-- Zebra
        Animal : +int age
        Animal : +String gender
        Animal: +isMammal()
        Animal: +mate()
        class Duck{
            +String beakColor
            +swim()
            +quack()
        }
        class Fish{
            -int sizeInFeet
            -canEat()
        }
        class Zebra{
            +bool is_wild
            +run()
        }
    ```

    ## State Diagram

    ```mermaid
    ---
    title: Simple sample
    ---
    stateDiagram-v2
        [*] --> Still
        Still --> [*]

        Still --> Moving
        Moving --> Still
        Moving --> Crash
        Crash --> [*]
    ```

    ## Entity Diagram

    ```mermaid
    erDiagram
        CAR ||--o{ NAMED-DRIVER : allows
        CAR {
            string registrationNumber PK
            string make
            string model
            string[] parts
        }
        PERSON ||--o{ NAMED-DRIVER : is
        PERSON {
            string driversLicense PK "The license #"
            string(99) firstName "Only 99 characters are allowed"
            string lastName
            string phone UK
            int age
        }
        NAMED-DRIVER {
            string carRegistrationNumber PK, FK
            string driverLicence PK, FK
        }
        MANUFACTURER only one to zero or more CAR : makes
    ```

    ## User Journey

    ```mermaid
    journey
        title My working day
        section Go to work
          Make tea: 5: Me
          Go upstairs: 3: Me
          Do work: 1: Me, Cat
        section Go home
          Go downstairs: 5: Me
          Sit down: 5: Me
    ```

    ## Gantt Chart

    ```mermaid
    gantt
        title A Gantt Diagram
        dateFormat YYYY-MM-DD
        section Section
            A task          :a1, 2014-01-01, 30d
            Another task    :after a1, 20d
        section Another
            Task in Another :2014-01-12, 12d
            another task    :24d
    ```

    ## Pie Chart

    ```mermaid
    pie title Pets adopted by volunteers
        "Dogs" : 386
        "Cats" : 85
        "Rats" : 15
    ```

    ## Quadrant Chart

    ```mermaid
    quadrantChart
        title Reach and engagement of campaigns
        x-axis Low Reach --> High Reach
        y-axis Low Engagement --> High Engagement
        quadrant-1 We should expand
        quadrant-2 Need to promote
        quadrant-3 Re-evaluate
        quadrant-4 May be improved
        Campaign A: [0.3, 0.6]
        Campaign B: [0.45, 0.23]
        Campaign C: [0.57, 0.69]
        Campaign D: [0.78, 0.34]
        Campaign E: [0.40, 0.34]
        Campaign F: [0.35, 0.78]
    ```

    ## Requirement Diagram

    ```mermaid
        requirementDiagram

        requirement test_req {
        id: 1
        text: the test text.
        risk: high
        verifymethod: test
        }

        functionalRequirement test_req2 {
        id: 1.1
        text: the second test text.
        risk: low
        verifymethod: inspection
        }

        performanceRequirement test_req3 {
        id: 1.2
        text: the third test text.
        risk: medium
        verifymethod: demonstration
        }

        interfaceRequirement test_req4 {
        id: 1.2.1
        text: the fourth test text.
        risk: medium
        verifymethod: analysis
        }

        physicalRequirement test_req5 {
        id: 1.2.2
        text: the fifth test text.
        risk: medium
        verifymethod: analysis
        }

        designConstraint test_req6 {
        id: 1.2.3
        text: the sixth test text.
        risk: medium
        verifymethod: analysis
        }

        element test_entity {
        type: simulation
        }

        element test_entity2 {
        type: word doc
        docRef: reqs/test_entity
        }

        element test_entity3 {
        type: "test suite"
        docRef: github.com/all_the_tests
        }


        test_entity - satisfies -> test_req2
        test_req - traces -> test_req2
        test_req - contains -> test_req3
        test_req3 - contains -> test_req4
        test_req4 - derives -> test_req5
        test_req5 - refines -> test_req6
        test_entity3 - verifies -> test_req5
        test_req <- copies - test_entity2
    ```

    ## GitGraph Diagram

    ```mermaid
        gitGraph
            commit id: "ZERO"
            branch develop
            branch release
            commit id:"A"
            checkout main
            commit id:"ONE"
            checkout develop
            commit id:"B"
            checkout main
            merge develop id:"MERGE"
            commit id:"TWO"
            checkout release
            cherry-pick id:"MERGE" parent:"B"
            commit id:"THREE"
            checkout develop
            commit id:"C"
    ```

    ## Mindmap example

    ```mermaid
    mindmap
      root((mindmap))
        Origins
          Long history
          ::icon(fa fa-book)
          Popularisation
            British popular psychology author Tony Buzan
        Research
          On effectiveness<br/>and features
          On Automatic creation
            Uses
                Creative techniques
                Strategic planning
                Argument mapping
        Tools
          Pen and paper
          Mermaid
    ```

    ## Timeline example

    ```mermaid
    timeline
        title History of Social Media Platform
        2002 : LinkedIn
        2004 : Facebook
             : Google
        2005 : Youtube
        2006 : Twitter
    ```

    ## Sankey example

    ```mermaid
    sankey-beta

    Bio-conversion,Losses,26.862
    Bio-conversion,Solid,280.322
    Bio-conversion,Gas,81.144
    ```

    ## XY Chart

    ```mermaid
    ---
    config:
        xyChart:
            width: 900
            height: 600
        themeVariables:
            xyChart:
                titleColor: "#ff0000"
    ---
    xychart-beta
        title "Sales Revenue"
        x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]
        y-axis "Revenue (in $)" 4000 --> 11000
        bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
        line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]
    ```

    ## Block example

    ```mermaid
    block-beta
      columns 3
      Start(("Start")) space:2
      down<[" "]>(down) space:2
      Decision{{"Make Decision"}} right<["Yes"]>(right) Process1["Process A"]
      downAgain<["No"]>(down) space r3<["Done"]>(down)
      Process2["Process B"] r2<["Done"]>(right) End(("End"))

      style Start fill:#969;
      style End fill:#696;
    ```

    ## Packet example

    ```mermaid
    ---
    title: "TCP Packet"
    ---
    packet-beta
    0-15: "Source Port"
    16-31: "Destination Port"
    32-63: "Sequence Number"
    64-95: "Acknowledgment Number"
    96-99: "Data Offset"
    100-105: "Reserved"
    106: "URG"
    107: "ACK"
    108: "PSH"
    109: "RST"
    110: "SYN"
    111: "FIN"
    112-127: "Window"
    128-143: "Checksum"
    144-159: "Urgent Pointer"
    160-191: "(Options and Padding)"
    192-255: "Data (variable length)"
    ```

    ## Kanban example

    ```mermaid
    ---
    config:
      kanban:
        ticketBaseUrl: 'https://mermaidchart.atlassian.net/browse/#TICKET#'
    ---
    kanban
      Todo
        [Create Documentation]
        docs[Create Blog about the new diagram]
      [In progress]
        id6[Create renderer so that it works in all cases. We also add som extra text here for testing purposes. And some more just for the extra flare.]
      id9[Ready for deploy]
        id8[Design grammar]@{ assigned: 'knsv' }
      id10[Ready for test]
        id4[Create parsing tests]@{ ticket: MC-2038, assigned: 'K.Sveidqvist', priority: 'High' }
        id66[last item]@{ priority: 'Very Low', assigned: 'knsv' }
      id11[Done]
        id5[define getData]
        id2[Title of diagram is more than 100 chars when user duplicates diagram with 100 char]@{ ticket: MC-2036, priority: 'Very High'}
        id3[Update DB function]@{ ticket: MC-2037, assigned: knsv, priority: 'High' }

      id12[Can't reproduce]
        id3[Weird flickering in Firefox]
    ```

    ## Architecture example

    ```mermaid
    architecture-beta
        group api(cloud)[API]

        service db(database)[Database] in api
        service disk1(disk)[Storage] in api
        service disk2(disk)[Storage] in api
        service server(server)[Server] in api

        db:L -- R:server
        disk1:T -- B:server
        disk2:T -- B:db
    ```
