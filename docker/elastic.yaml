# Author: Nuno Aguiar
help: 
  text   : Generates a quick docker-compose with elasticsearch and, optionally, kibana.
  expects: 
  - name     : kibana
    desc     : "If kibana=true kibana will be added to the docker-compose file."
    mandatory: false
    example  : "true"
  - name     : cluster
    desc     : If defined will add the number of elasticsearch nodes specified.
    mandatory: false
    example  : 2

init:
  dc  : |
    version : '3'

    networks:
      elastic:
        driver: bridge

    services:{{#if single}}
      elastic:
        image         : docker.elastic.co/elasticsearch/elasticsearch:{{version}}
        container_name: elastic
        environment   :
        - node.name=elastic
        - cluster.name=es-cluster
        - xpack.security.enabled=false
        - discovery.type=single-node
        - bootstrap.memory_lock=true
        - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        healthcheck   :
          test    : [ "CMD-SHELL", "curl --silent --fail http://elastic:9200/_cluster/health || exit 1" ]
          interval: 30s
          timeout : 30s    
          retries : 3  
        ulimits       :
          memlock:
            soft: -1
            hard: -1
        ports         :
        - "9200:9200"
        volumes :
        - esdata:/usr/share/elasticsearch/data
        networks:
        - elastic{{else}}{{#each nodes}}
      es{{name}}:
        image         : docker.elastic.co/elasticsearch/elasticsearch:{{../version}}
        container_name: es{{name}}
        environment   :
        - node.name=es{{name}}
        - cluster.name=es-cluster
        - xpack.security.enabled=false
        - discovery.seed_hosts={{seed}}
        - cluster.initial_master_nodes={{initial}}
        - bootstrap.memory_lock=true
        - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        healthcheck   :
          test    : [ "CMD-SHELL", "curl --silent --fail http://es{{name}}:9200/_cluster/health || exit 1" ]
          interval: 30s
          timeout : 30s    
          retries : 3          
        ulimits       :
          memlock:
            soft: -1
            hard: -1{{#if first}}
        ports         :
        - "9200:9200"{{/if}}
        volumes :
        - esdata{{name}}:/usr/share/elasticsearch/data
        networks:
        - elastic
      {{/each}}{{/if}}{{#if kibana}}
      kibana:
        image         : docker.elastic.co/kibana/kibana:{{version}}
        container_name: kibana
        depends_on    :
          {{#if nodes}}es1:{{else}}elastic:{{/if}}
            condition: service_healthy
        ports         :
        - 5601:5601
        environment   :
          ELASTICSEARCH_URL  : {{#if single}}http://elastic:9200{{else}}http://es1:9200{{/if}}
          ELASTICSEARCH_HOSTS: '[{{#if single}}"http://elastic:9200"{{else}}{{{nodesList}}}{{/if}}]'
          CSP_STRICT         : "false"
        healthcheck:
          test: ["CMD-SHELL", "curl --silent --fail http://kibana:5601/status || exit 1"]
          interval: 30s
          timeout: 30s
          retries: 5
          start_period: 30s          
        networks      :
        - elastic
      {{/if}}

    volumes:{{#if single}}
      esdata:{{else}}{{#each nodes}}
      esdata{{name}}:{{/each}}{{/if}}

todo:
- Check for docker
- Generate docker-compose

include:
- ojob.io/docker/_common

ojob:
  opacks      :
  - openaf: 20210721
  catch       : "logErr(exception);"
  logToConsole: false   # to change when finished

jobs:
# -----------------------------
- name: Generate docker-compose 
  exec: |
    args.kibana         = _$(args.kibana, "kibana").default("false")
    args.cluster        = _$(args.cluster, "cluster").default(__)
   
    var o = $rest().get("https://api.github.com/repos/elastic/elasticsearch/releases")
    var version = $from(o).equals("prerelease", false).sort("-tag_name", "-published_at").at(0).tag_name.match(/((\d+\.)*\d)+/)[0]

    var data = { 
       kibana    : toBoolean(args.kibana),
       single    : isUnDef(args.cluster),
       version   : version
    };

    if (isDef(args.cluster) && isNumber(args.cluster)) {
      data.nodes = []
      var seed = []
      for(var ii = 1; ii <= args.cluster; ii++) seed.push("es" + String(ii))
      for(var ii = 1; ii <= args.cluster; ii++) {
        data.nodes.push({
          name     : String(ii),
          seed     : seed.filter(r => r != "es" + String(ii)).join(","),
          initial  : seed.join(","),
          first    : (ii == 1)
        })
      }
      data.nodesList = seed.map(r => "\"http://" + String(r) + ":9200\"").join(",")
    }

    //sprint(data)

    tprint(args.init.dc, data);
