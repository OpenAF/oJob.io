# Author: Nuno Aguiar
help: 
  text   : Downloads docker-compose binary or pulls docker-compose docker image and generates an unix script to run it
  expects: 
  - name     : path
    desc     : Path where the docker-compose script will be stored (default /usr/local/bin)
    example  : /usr/local/bin
    mandatory: false
  - name     : container
    desc     : If container=true will try to download the binary docker-compose
    example  : true
    mandatory: false 

init:
  script: |
    #!/bin/sh
    #
    # Run docker-compose in a container
    #
    # This script will attempt to mirror the host paths by using volumes for the
    # following paths:
    #   * $(pwd)
    #   * $(dirname $COMPOSE_FILE) if it's set
    #   * $HOME if it's set
    #
    # You can add additional volumes (or any docker run options) using
    # the $COMPOSE_OPTIONS environment variable.
    #

    set -e

    VERSION="latest"
    IMAGE="docker/compose:$VERSION"

    # Setup options for connecting to docker host
    if [ -z "$DOCKER_HOST" ]; then
        DOCKER_HOST='unix:///var/run/docker.sock'
    fi
    if [ -S "${DOCKER_HOST#unix://}" ]; then
        DOCKER_ADDR="-v ${DOCKER_HOST#unix://}:${DOCKER_HOST#unix://} -e DOCKER_HOST"
    else
        DOCKER_ADDR="-e DOCKER_HOST -e DOCKER_TLS_VERIFY -e DOCKER_CERT_PATH"
    fi

    # Setup volume mounts for compose config and context
    if [ "$(pwd)" != '/' ]; then
        VOLUMES="-v $(pwd):$(pwd)"
    fi
    if [ -n "$COMPOSE_FILE" ]; then
        COMPOSE_OPTIONS="$COMPOSE_OPTIONS -e COMPOSE_FILE=$COMPOSE_FILE"
        compose_dir="$(dirname "$COMPOSE_FILE")"
        # canonicalize dir, do not use realpath or readlink -f
        # since they are not available in some systems (e.g. macOS).
        compose_dir="$(cd "$compose_dir" && pwd)"
    fi
    if [ -n "$COMPOSE_PROJECT_NAME" ]; then
        COMPOSE_OPTIONS="-e COMPOSE_PROJECT_NAME $COMPOSE_OPTIONS"
    fi
    # TODO: also check --file argument
    if [ -n "$compose_dir" ]; then
        VOLUMES="$VOLUMES -v $compose_dir:$compose_dir"
    fi
    if [ -n "$HOME" ]; then
        VOLUMES="$VOLUMES -v $HOME:$HOME -e HOME" # Pass in HOME to share docker.config and allow ~/-relative paths to work.
    fi

    # Only allocate tty if we detect one
    if [ -t 0 ] && [ -t 1 ]; then
        DOCKER_RUN_OPTIONS="$DOCKER_RUN_OPTIONS -t"
    fi

    # Always set -i to support piped and terminal input in run/exec
    DOCKER_RUN_OPTIONS="$DOCKER_RUN_OPTIONS -i"

    # Handle userns security
    if docker info --format '{{json .SecurityOptions}}' 2>/dev/null | grep -q 'name=userns'; then
        DOCKER_RUN_OPTIONS="$DOCKER_RUN_OPTIONS --userns=host"
    fi

    # shellcheck disable=SC2086
    exec docker run --rm $DOCKER_RUN_OPTIONS $DOCKER_ADDR $COMPOSE_OPTIONS $VOLUMES -w "$(pwd)" $IMAGE "$@"


include:
- ojob.io/docker/_common

todo:
- Check for docker
- Check options
- name: Download docker-compose
  when: download
- name: Pull docker-compose
  when: pull

ojob:
  opacks      :
  - openaf: 20211229
  catch       : logErr(exception);
  logToConsole: true   # to change when finished

jobs:
- name : Check options
  check:
    in:
      container: toBoolean.isBoolean.default(false)
  exec : |
    if (args.container) ow.oJob.setState("pull"); else ow.oJob.setState("download")

# -----------------------------
- name : Download docker-compose
  check:
    in:
       path: isString.default("/usr/local/bin")
  exec : |
    var res = $rest().get("https://api.github.com/repos/docker/compose/releases")
    res = $from(res)
          .equals("draft", false)
          .equals("prerelease", false)
          .sort("-published_at")

    if (res.any()) {        
        var os   = ow.format.isWindows() ? "windows" : $sh("echo `uname`|tr '[:upper:]' '[:lower:]'").get(0).stdout.trim()
        var arch = $sh("uname -m").get(0).stdout.trim()
        
        if (arch.startsWith("armv6")) arch = "armv6"
        if (arch.startsWith("armv7")) arch = "armv7"
        if (arch == "aarch64") arch = "aarch64"
        if (arch == "ppc64le") arch = "ppc64le"
        if (arch == "s390x") arch = "s390x"
        if (arch == "amd64") arch = "x86_64"

        var tagName = res.at(0).tag_name
        var url = "https://github.com/docker/compose/releases/download/" + tagName + "/docker-compose-" + os + "-" + arch + (os == "windows" ? ".exe" : "")
        var _head = $rest().head(url)
        if (isDef(_head) && isDef(_head.responseCode) && _head.responseCode == 200) {
            log("Downloading " + url + " (" + ow.format.toBytesAbbreviation(_head.response["content-length"]) + ")...")
            $rest().get2File(args.path + "/docker-compose" + (os == "windows" ? ".exe" : ""), url)

            if (os != "windows") {
                log("Setting execution permissions to script...");
                $sh("chmod u+x " + args.path + "/docker-compose").exec();
            }
        } else {
            throw "Can't find '" + url + "'. Alternatively try with the container=true option." 
        }
    }

# --------------------------
- name : Pull docker-compose
  deps :
  - Check for docker
  check:
    in:
       path: isString.default("/usr/local/bin")
  exec : |
    log("Retrieve docker/compose image...");
    $sh("docker pull docker/compose").exec();

    log("Generate script in " + args.path + "...");
    io.writeFileString(args.path + "/docker-compose", args.init.script);
    
    log("Setting execution permissions to script...");
    $sh("chmod u+x " + args.path + "/docker-compose").exec();