# Author: Nuno Aguiar
help:
  text   : Generates a quick docker-compose with prometheus and, optionally, grafana.
  expects: 
  - name: grafana 
    desc: "If grafana=true grafana will be added to the docker-compose file."
  - name: pushgateway
    desc: "If pushgateway=true pushgateway will be added to the docker-compose file."
  - name: prometheusConfig
    desc: "The localfilename containing the prometheus configuration (default: prometheus.yml)"

init:
  prom: |
    # my global config
    global:
      scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      scrape_timeout:      15s
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
      # scrape_timeout is set to the global default (10s).

    # Alertmanager configuration
    alerting:
      alertmanagers:
      - scheme: http
        timeout: 10s
        api_version: v2
        static_configs:
        - targets:
        # - alertmanager:9093

    # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
    rule_files:
      # - "first_rules.yml"
      # - "second_rules.yml"

    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: 'prometheus'
        honor_timestamps: true
        scrape_interval: 15s
        scrape_timeout: 10s
        metrics_path: /metrics
        scheme: http
        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.
        static_configs:
        - targets: ['localhost:9090']
    {{#if pushgateway}}
      - job_name: 'pushgateway'
        honor_timestamps: true
        scrape_interval: 15s
        scrape_timeout: 10s
        metrics_path: /metrics
        scheme: http
        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.
        static_configs:
        - targets: ['pushgateway:9091']
    {{/if}}     

  dc  : |
    version : '3'
    
    networks:
      prom:

    services:

      prometheus:
        image   : prom/prometheus
        hostname: prometheus
        ports   :
        - "9090:9090"
        volumes :
        - {{promYaml}}:/etc/prometheus/prometheus.yml
        - prometheus:/prometheus
        networks:
        - prom{{#if pushgateway}}

      pushgateway:
        image   : prom/pushgateway
        hostname: pushgateway
        ports   :
        - "9091:9091"
        networks:
        - prom
      {{/if}}{{#if grafana}}

      #
      # To add Prometheus to Grafana:
      #
      #   docker-compose exec grafana curl -X POST http://127.0.0.1:3000/api/datasources -H 'Content-Type: application/json'  -d '{"name":"prometheus","type":"prometheus","url":"http://prometheus:9090","access":"proxy","isDefault":true}'
      #
      grafana:
        image      : grafana/grafana
        hostname   : grafana
        environment:
        - GF_AUTH_ANONYMOUS_ENABLED=true
        - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
        ports      :
        - "3000:3000"
        volumes    :
        - grafana:/var/lib/grafana
        networks   :
        - prom
      {{/if}}

    volumes:
      prometheus:{{#if grafana}}
      grafana:{{/if}}

todo:
- Check for docker
- Install prometheus

include:
- ojob.io/docker/_common

ojob:
  opacks      :
  - openaf: 20220822
  catch       : "ow.oJob.output({ Help: args.init.help }, args); logErr(exception);"
  logToConsole: false   # to change when finished

jobs:
# ------------------------
- name: Install prometheus 
  exec: |
    args.grafana          = _$(args.grafana, "grafana").default("false");
    args.pushgateway      = _$(args.pushgateway, "pushgateway").default("false"); 
    args.prometheusConfig = _$(args.prometheusConfig, "prometheusConfig").default(io.fileInfo(".").canonicalPath + "/prometheus.yml");

    var data = { 
       grafana    : toBoolean(args.grafana),
       pushgateway: toBoolean(args.pushgateway)
    };

    io.writeFileString(args.prometheusConfig, templify(args.init.prom, data));
  
    data.promYaml = io.fileInfo(args.prometheusConfig).canonicalPath;
    tprint(args.init.dc, data);
