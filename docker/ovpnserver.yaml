# Author: Nuno Aguiar
help:
  text   : Creates an openvpn docker daemon and shell scripts to add/del/list users.
  expects:
  - name     : url
    desc     : The vpn external url (either "tcp://some.address" or "udp://some.address")
    example  : udp://1.2.3.4
    mandatory: true
  - name     : path
    desc     : Path where the scripts to use the vpn will be created (defaults to ".")
    example  : /opt/vpn
    mandatory: false
  - name     : volume
    desc     : Volume where the openvpn configuration will be stored (defaults to a docker volume openvpn)
    example  : /etc/openvpn
    mandatory: false
  - name     : dns
    desc     : Use a specific dns server instead of the Google DNS servers (e.g. 1.2.3.4)
    example  : 10.90.0.2
    mandatory: false
  - name     : default
    desc     : If default=true all traffic will be redirect to this vpn (default is false)
    example  : "false"
    mandatory: false
  - name     : nat
    desc     : If nat=false vpn clients will not be NATed (default is true)
    example  : "true"
    mandatory: false
  - name     : subnet
    desc     : Using a specific subnet for the vpn clients (e.g. 10.200.0.0/16)
    example  : "10.190.0.0/16"
    mandatory: false
  - name     : route
    desc     : Specify a specific route for VPN clients (e.g. "192.168.1.0 255.255.255.0")
    example  : "10.90.0.0 255.255.0.0"
    mandatory: false
  - name     : keysize
    desc     : Specify a RSA keysize different from the 4096 default.
    example  : 4096
    mandatory: false

todo:
- Generate server
- Generate start script
- Generate stop script
- Generate add script
- Generate del script
- Generate list script
- Generate destroy script
- Show instructions

ojob:
  opacks      :
  - openaf: 20210412
  catch       : |
    logErr(exception);
  logToConsole: true   # to change when finished
  sequential  : true

jobs:
# ----------------------------
- name: Build container if ARM
  exec: |
    var plat = String(java.lang.System.getProperty("os.arch"));
    if (plat == "aarch64") {
      // Determine package manager
      var os = [{ name: "RedHat", cmd: "yum",     tmpl: "yum -y install {{package}}"},
                { name: "Debian", cmd: "apt-get", tmpl: "apt-get install {{package}} -y"},
                { name: "Alpine", cmd: "apk",     tmpl: "apk add {{package}}"}];
        
      // GIT install command
      log("Installing git...");
      var cmd = templify( $from( os )
                          .attach("exists", r => $sh("which " + r.cmd).get(0).exitcode == 0)
                          .equals("exists", true)
                          .at(0)
                          .tmpl, { 
                            package: "git" 
                          } );
      $sh(cmd)
      .prefix("install git")
      .get();
 
      logWarn("Need to build container for arm...");
      //$sh("docker build -f Dockerfile.aarch64 -t kylemanna/openvpn https://github.com/kylemanna/docker-openvpn.git")
      $sh("docker build -f Dockerfile.aarch64 -t kylemanna/openvpn https://github.com/nmaguiar/docker-openvpn.git")
      .prefix("build")
      .get();
    }
   
# ---------------------
- name: Generate server
  from:
  - Build container if ARM
  exec: |
    ow.loadFormat();
    
    args.path   = _$(args.path, "path").default(".");
    args.nat    = _$(args.nat, "nat").default("true"); 
    
    global.url = _$(args.url, "url").default("udp://" + ow.format.getPublicIP().ip);
    global.keysize = _$(args.keysize, "keysize").default(4096);

    var exists = $sh("docker").get(0).exitcode;
    if (exists != 0) throw "Couldn't find the docker client. Please install docker.";

    var res;
    global.volume = _$(args.volume, "volume").default("openvpn");

    if (global.volume.indexOf("/") < 0 && global.volume.indexOf("\\") < 0) {
      log("Creating volume " + global.volume + "...");
      res = $sh("docker volume create " + global.volume).prefix("volume").get(0);
      if (res.exitcode != 0) throw "Failed to create " + global.volume + " docker volume.";
    } else {
      log("Using volume " + global.volume)
    }

    log("Generating openvpn configuration for " + global.url + "...");
    //res = $sh("docker run -v " + global.volume + ":/etc/openvpn --log-driver=none --rm kylemanna/openvpn ovpn_genconfig -N -d -s 10.200.0.0/16 -C 'AES-256-CBC' -a 'SHA384' -u " + global.url).prefix("config").get(0);
    var cmd = "docker run -v " + global.volume + ":/etc/openvpn --log-driver=none --rm kylemanna/openvpn ovpn_genconfig ";
    cmd += "-C 'AES-256-CBC' -a 'SHA384' -b ";
    if (!toBoolean(args.default)) cmd += "-d ";
    if (toBoolean(args.nat))      cmd += "-N ";
    if (isDef(args.route))        cmd += "-p 'route " + args.route + "' ";
    if (isDef(args.dns))          cmd += "-n " + args.dns + " ";
    if (isDef(args.subnet))       cmd += "-s " + args.subnet + " ";
    cmd += "-u";
    print(cmd);
    res = $sh(cmd + global.url).prefix("config").get(0);
    if (res.exitcode != 0) throw "Failed to create openvpn configuration.";

    log("Initializing PKI...");
    res = $sh("docker run -v " + global.volume + ":/etc/openvpn --log-driver=none --rm -it -e EASYRSA_KEY_SIZE=" + global.keysize + " kylemanna/openvpn ovpn_initpki").prefix("init pki").exec(0);
    if (res.exitcode != 0) throw "Failed to initialize PKI.";

    args.__format = _$(args.__format).default("pm");
    ow.oJob.output(args, args);

# ---------------------
- name: Generate script
  exec: |
    _$(args.text, "text").$_();
    args.path = _$(args.path, "path").default(".");
    args.file = _$(args.file, "file").$_();

    var isWin = false;
    if (isDef(args.isWin) && args.isWin.toLowerCase() == "true") {
       isWin = true;
    } else {
       ow.loadFormat();
       if (ow.format.isWindows()) isWin = true;
    }

    if (isWin) args.file = args.file.replace(/\.sh$/, ".bat");
    var text = (isWin ? args.winText : args.text);
    if (global.url.startsWith("udp")) text = text.replace("tcp", "udp");
    text = text.replace(/-v openvpn:/g, "-v " + global.volume + ":");
    if (global.volume.indexOf("/") >= 0 || global.volume.indexOf("\\") >= 0) {
      text = text.replace("docker volume rm openvpn", "echo Remove manually contents from " + global.volume);
    } else {
      text = text.replace("docker volume rm openvpn", "docker volume rm "+ global.volume);
    }
    text = text.replace("-e EASYRSA_KEY_SIZE", "-e " + global.keysize);

    io.writeFileString(args.path + "/" + args.file, text);
    if (!isWin) $sh("chmod u+x " + args.path + "/" + args.file).exec();

# ---------------------------
- name: Generate start script
  deps:
  - Generate server
  to  :
  - Generate script
  args:
    file: openvpn_start.sh
    text: |
      #!/bin/sh
      docker run -v openvpn:/etc/openvpn -d -p 1194:1194/tcp --restart=always --cap-add=NET_ADMIN --name openvpn kylemanna/openvpn
    winText: |
      @echo off
      docker run -v openvpn:/etc/openvpn -d -p 1194:1194/tcp --restart=always --cap-add=NET_ADMIN --name openvpn kylemanna/openvpn

# --------------------------
- name: Generate stop script
  deps:
  - Generate server
  to  :
  - Generate script
  args:
    file: openvpn_stop.sh
    text: |
      #!/bin/sh
      docker stop openvpn
      docker rm openvpn
    winText: |
      @echo off
      docker stop openvpn
      docker rm openvpn

# -------------------------
- name: Generate add script
  deps:
  - Generate server
  to  :
  - Generate script
  args:
    file: openvpn_add.sh
    text: |
      #!/bin/sh
      if [ -z "$1" ]; then
        echo "Please provide an username."
      else
        docker run -v openvpn:/etc/openvpn --log-driver=none --rm -it -e EASYRSA_KEY_SIZE kylemanna/openvpn easyrsa build-client-full $1 nopass
        docker run -v openvpn:/etc/openvpn --log-driver=none --rm kylemanna/openvpn ovpn_getclient $1 > $1.ovpn
        echo "Created file $1.ovpn"
      fi
    winText: |
      IF "%1"=="" (
        echo "Please provide an username."
      ) ELSE (
        @echo off
        docker run -v openvpn:/etc/openvpn --log-driver=none --rm -it -e EASYRSA_KEY_SIZE kylemanna/openvpn easyrsa build-client-full %1 nopass
        docker run -v openvpn:/etc/openvpn --log-driver=none --rm kylemanna/openvpn ovpn_getclient %1 > %1.ovpn
        echo "Created file %1.ovpn"
      )

# ------------------------
- name: Generate del script
  deps:
  - Generate server
  to  :
  - Generate script
  args:
    file: openvpn_del.sh
    text: |
      #!/bin/sh
      if [ -z "$1" ]; then
        echo "Please provide a name."
      else
        docker run -v openvpn:/etc/openvpn --log-driver=none --rm -ti kylemanna/openvpn ovpn_revokeclient $1
      fi
    winText: |
      IF "%1"=="" (
        echo "Please provide an username."
      ) ELSE (
        @echo off
        docker run -v openvpn:/etc/openvpn --log-driver=none --rm -ti kylemanna/openvpn ovpn_revokeclient %1
      )

# --------------------------
- name: Generate list script
  deps:
  - Generate server
  to  :
  - Generate script
  args:
    file: openvpn_list.sh
    text: |
      #!/bin/sh
      docker run -v openvpn:/etc/openvpn --log-driver=none --rm kylemanna/openvpn ovpn_listclients
      #oaf -c 'print(printTable($sh("docker run -v /etc/openvpn:/etc/openvpn --log-driver=none --rm kylemanna/openvpn ovpn_listclients").get(0).stdout.split("\n").filter((r,i)=> i!=0&&r.length>0).map(r=>{var [n,b,e,s]=r.split(",");return {name:n,begin:b,end:e,status:s}})))'
    winText: |
      @echo off
      docker run -v openvpn:/etc/openvpn --log-driver=none --rm kylemanna/openvpn ovpn_listclients
      #oaf -c 'print(printTable($sh("docker run -v /etc/openvpn:/etc/openvpn --log-driver=none --rm kylemanna/openvpn ovpn_listclients").get(0).stdout.split("\n").filter((r,i)=> i!=0&&r.length>0).map(r=>{var [n,b,e,s]=r.split(",");return {name:n,begin:b,end:e,status:s}})))'

# -----------------------------
- name: Generate destroy script
  deps:
  - Generate server
  to  :
  - Generate script
  args:
    file: openvpn_destroy.sh
    text: |
      #!/bin/sh
      docker volume rm openvpn
    winText: |
      @echo off
      docker volume rm openvpn

# -----------------------
- name: Show instructions
  deps:
  - Generate start script
  - Generate stop script
  - Generate add script
  - Generate del script
  - Generate list script
  - Generate destroy script
  exec: |
    ow.oJob.output(args, args);