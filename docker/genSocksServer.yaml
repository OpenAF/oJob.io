# Author: Nuno Aguiar
help:
  text   : Generates the docker or docker-compose entries to have a quick and simple unencrypted socks5 server.
  expects: 
  - name     : cmdline
    desc     : If cmdline=true it will generate the command line instead of docker-compose
    example  : "true"
    mandatory: false
  - name     : network
    desc     : If defined it will use the corresponding network name
    example  : mynet
    mandatory: false
  - name     : onlylocal
    desc     : Deploy the socks proxy server only accepting connections to private network ip addresses
    example  : "true"
    mandatory: false

todo:
- name: ojob options
  args:
    __optionOn : cmdline
    __lowerCase: true
    __todos    :
      "true" :
      - Generate docker
      "false":
      - Generate docker-compose
    __default  :
    - Generate docker-compose

ojob:
  opacks      :
  - openaf: 20211229
  catch       : if (isDef(exception.javaException)) exception.javaException.printStackTrace(); else printErr(exception)
  logToConsole: false   # to change when finished

include:
- ojob.io/common/ojob      

jobs:
# ----------------------
- name : Generate docker
  exec :
    tprint("docker run --pull always --rm -ti -p 1080:1080 {{#if onlylocal}}-e ONLY_LOCAL=true {{/if}}{{#if network}}--network {{network}} {{/if}}openaf/oaf:nightly -c \"includeOPack('SocksServer');loadLib('socksServer.js');(new SocksServer()).start(1080);ow.loadServer().daemon()\"", args)

# ------------------------------
- name : Generate docker-compose
  args :
    dc: |
      version: '3.4'

      services:
        socks:
          hostname: socks
          image   : openaf/oaf:nightly
          ports   :
          - 1080:1080
          {{#if network}}
          networks:
          - {{network}}
          {{/if}}
          {{#if onlylocal}}
          environment:
          - ONLY_LOCAL=true
          {{/if}}
          command :
          - /openaf/oaf
          - -c
          - includeOPack('SocksServer');loadLib('socksServer.js');(new SocksServer()).start(1080);ow.loadServer().daemon()

      {{#if network}}
      networks:
        {{network}}:
      {{/if}}

  exec : |
    tprint(args.dc, args)