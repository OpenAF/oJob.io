init:
  interval: 1000
  elems:
  - - title: Java info
      type : tree
      obj  : |
        (() => {
          var o = $cache("data").get(0)
          return {
            updated    : (new Date()).toISOString(),
            cmd        : o.sun.rt.javaCommand,
            started    : o.sun.rt.__createVmBeginDate.toISOString() + " (" + ow.format.timeago(o.sun.rt.__createVmBeginDate, true) + ")",
            jvmName    : o.java.property.java.vm.name,
            jvmVersion : o.java.property.java.version,
            jvmVendor  : o.java.property.java.vm.vendor,
            gcCause    : o.sun.gc.cause,
            gcLastCause: o.sun.gc.lastCause,
            appTime    : $f("% 3.2f", o.sun.rt.__percAppTime)+"%"
          }
        })()
    - title: GC generations
      type : table
      obj  : |
        (() => {
          var o = $cache("data").get(0).sun.gc.generation
          var res = []
          $from(o).select(gen => {
            res.push({
              gen  : gen.name,
              used : gen.__totalUsed > 0 ? ow.format.toBytesAbbreviation(gen.__totalUsed) : gen.__totalUsed,
              total: ow.format.toBytesAbbreviation(gen.capacity),
              max  : ow.format.toBytesAbbreviation(gen.maxCapacity)
            })
          })
          return res
        })()
  - - title: GC Collectors
      type : table
      obj  : |
        (() => {
          var o = $cache("data").get(0).sun.gc.collector
          o.forEach(r => {
            var _r = $ch("gcLoad").get({ n: r.name })
            if (isUnDef(_r)) _r = { n: r.name, inv: [] }
            _r.inv.push(r.invocations)
            while(_r.inv.length > 15) { _r.inv.shift() }
            $ch("gcLoad").set({ n: r.name }, _r)
          })
          return o.map(r => {
            var gcLoad = $ch("gcLoad").get({ n: r.name })
            return {
              name : r.name,
              count: r.invocations,
              avg  : ow.format.elapsedTime4ms(r.__avgExecTime, {abrev:true}),
              last : ow.format.elapsedTime4ms(r.__lastExecTime, {abrev:true}),
              ago  : ow.format.timeago(r.__lastEntryDate, true),
              c1      : (gcLoad.inv.length > 1) ? gcLoad.inv.reverse()[0] - Math.floor($from(gcLoad.inv.reverse()).limit(1).average()) : "",
              c5      : (gcLoad.inv.length > 4) ? gcLoad.inv.reverse()[0] - Math.floor($from(gcLoad.inv.reverse()).limit(5).average()) : "",
              c15     : (gcLoad.inv.length > 14) ? gcLoad.inv.reverse()[0] - Math.floor($from(gcLoad.inv.reverse()).limit(15).average()) : ""
            }
          })
        })()
    - title: GC spaces
      type : table
      obj  : |
        (() => {
          var o = $cache("data").get(0).sun.gc.generation
          var res = []
          $from(o).select(gen => {
            $from(gen.space).select(space => {
              res.push({
                gen  : gen.name,
                space: space.name,
                used : space.used > 0 ? ow.format.toBytesAbbreviation(space.used) : 0,
                total: space.capacity > 0 ? ow.format.toBytesAbbreviation(space.capacity) : 0,
                max  : space.maxCapacity > 0 ? ow.format.toBytesAbbreviation(space.maxCapacity) : 0,
                perc : $f("% 3.2f", (100 * space.used) / space.capacity) + "%"
              })
            })
          })
          return res
        })()
  - - title: Threads
      type : tree
      obj  : |
        (() => {
          var o = $cache("data").get(0).java.threads
          return {
             live: o.live,
             started : o.started,
             livePeak: o.livePeak,
             daemon  : o.daemon
          }
        })()
    - title: Memory
      type : table
      obj  : |
        (() => {
          var o = $cache("data").get(0).sun.gc
          var r = { max: 0, total: 0, used: 0, free: 0 }
          $from(o.generation).select(gen => {
            $from(gen.space).select(space => {
              r.max   = (r.max < Number(space.maxCapacity)) ? Number(space.maxCapacity) : r.max
              r.used  = r.used + Number(space.used)
              r.total = isNumber(space.capacity) ? r.total + Number(space.capacity) : r.total
            })
          })

          return [ { item: "max",   value: ow.format.toBytesAbbreviation(r.max),            perc: "" }, 
                   { item: "total", value: ow.format.toBytesAbbreviation(r.total),          perc: $f("% 3.2f",(r.total/r.max)*100) + "%" }, 
                   { item: "used",  value: ow.format.toBytesAbbreviation(r.used),           perc: $f("% 3.2f",(r.used/r.total)*100) + "%" }, 
                   { item: "free",  value: ow.format.toBytesAbbreviation(r.total - r.used), perc: $f("% 3.2f",(100 - ((r.used/r.total)*100))) + "%" },
                   { item: "meta max",   value: ow.format.toBytesAbbreviation(o.metaspace.maxCapacity),                 perc: "" },
                   { item: "meta total", value: ow.format.toBytesAbbreviation(o.metaspace.capacity),                    perc: $f("% 3.2f",((o.metaspace.capacity/o.metaspace.maxCapacity)*100)) + "%" },
                   { item: "meta used",  value: ow.format.toBytesAbbreviation(o.metaspace.used),                        perc: $f("% 3.2f",((o.metaspace.used/o.metaspace.capacity)*100)) + "%" },
                   { item: "meta free",  value: ow.format.toBytesAbbreviation(o.metaspace.capacity - o.metaspace.used), perc: $f("% 3.2f",(100 - ((o.metaspace.used/o.metaspace.capacity)*100))) + "%" }]
        })()
    - title: Memory chart
      type : func
      obj  : |
        var o = $cache("data").get(0).sun.gc.generation;
        var r = { max: 0, total: 0, used: 0, free: 0 };
        $from(o).select(gen => {
            $from(gen.space).select(space => {
            r.max   = (r.max < Number(space.maxCapacity)) ? Number(space.maxCapacity) : r.max
            r.used  = r.used + Number(space.used)
            r.total = isNumber(space.capacity) ? r.total + Number(space.capacity) : r.total
          })
        })
        return ow.format.string.chart("heap_used", r.used, my-1, mx-3)
        
todo:
- Init
- Show grid

help:
  text   : Shows basic Java GC information
  expects:
  - name     : pid
    desc     : The PID of the Java process
    example  : 12345
    mandatory: false
  - name     : file
    desc     : The Java HS performance file to parse (e.g /tmp/hsperfdata_somebody/12345). If not provided and cmd is not provided it will use pid
    example  : /tmp/hsperfdata_somebody/12345
    mandatory: false
  - name     : cmd
    desc     : Command to run to obtain the Java HS performance file contents. If not provided and file is not provided it will use pid.
    example  : cat /tmp/hsperfdata_somebody/12345
    mandatory: false
  

ojob:
  opacks:
  - openaf: 20220505
  catch: logErr(exception)
  logToConsole: false

jobsInclude:
- https://ojob.io/grid/show

jobs:
- name : Init
  check:
    in:
      pid: isNumber.default(__)
  exec : |
    ow.loadJava()
    ow.loadFormat()

    $cache("data")
    .ttl(1000)
    .fn(() => {
      var data = __
    
      if (isDef(args.pid)) {
        var d = $from(ow.java.getLocalJavaPIDs()).equals("pid", args.pid)

        if (d.none()) throw "Can't use pid " + args.pid
        data = ow.java.parseHSPerf( d.at(0).path )
      } else {
        var ostream = af.newOutputStream()
        if (isDef(args.file)) {
          var istream = io.readFileStream(args.file)
          
          ioStreamCopy(ostream, istream)
          data = ow.java.parseHSPerf(ostream.toByteArray())
        } else {
          if (isDef(args.cmd)) {
            $sh(args.cmd)
            .cb((o, e, i) => {
              ioStreamCopy(ostream, o)
              data = ow.java.parseHSPerf(ostream.toByteArray())
            })
            .get()
          } else {
            throw "No arguments to use to retrieve data."
          }
        }
      }
      
      return data
    })
    .create()

    $ch("gcLoad").create()
