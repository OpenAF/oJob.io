# Author: Nuno Aguiar
help:
  text   : Generates a random password.
  expects: 
  - name     : size
    desc     : The size of the random password (defaults to 12)
    example  : 12
    mandatory: false
  - name     : sets
    desc     : Comma delimited list of sets of characters to use (lowercase, uppercase, numbers, symbols, symbols2)
    example  : lowercase,uppercase,numbers,symbols
    mandatory: false
  - name     : exclude
    desc     : Set of characters to be exclude from the password generation
    example  : "#"
    mandatory: false

init:
  sets:
    lowercase: abcdefghijklmnopqrstuvwxyz
    uppercase: ABCDEFGHIJKLMNOPQRSTUVWXYZ
    numbers  : 1234567890
    symbols  : "!@#$%*+_-?"
    symbols2 : "\",./:;'<=>(){}?@[\\]^`~&"
  weight:
    lowercase: 40
    uppercase: 36
    numbers  : 15
    symbols  : 9
    symbols2 : 9

todo:
- Generate Password

ojob:
  opacks      :
  - openaf: 20210515
  catch       : "ow.oJob.output({ Help: args.init.help }, args); logErr(exception);"
  logToConsole: false   # to change when finished
        

jobs:
# -----------------------
- name: Generate Password
  exec: |
    args.size    = _$(args.size, "size").isNumber().default(12);
    args.sets    = _$(args.sets, "sets").isString().default("lowercase,uppercase,numbers,symbols");
    args.exclude = _$(args.exclude, "exclude").isString().default("");

    args.sets = args.sets.split(",").map(r => r.toLowerCase().trim());

    ow.loadObj(); 
    var pass = "", numberOfSets = args.sets.length;

    var ar = args.sets.map(r => ({
      s: args.init.sets[r], w: args.init.weight[r]
    }));

    var pass = "", sr = new java.security.SecureRandom();
    for(var i = 0; i < args.size; i++) {
      var s, c;
      do {
        s = String( ow.obj.oneOf( ar, "w" ).s );
        c = s.charAt( sr.nextInt(s.length) );
      } while(args.exclude.indexOf(c) >= 0)
      pass += c 
    }

    ow.oJob.output({ password: pass }, args);