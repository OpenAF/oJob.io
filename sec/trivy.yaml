# Author: Nuno Aguiar
help:
  text   : Execute trivy to scan for vunerabilities
  expects: 
  - name     : path
    desc     : Scan the provided path (defaults to .)
    example  : aFolder/somewhere
    mandatory: false
  - name     : image
    desc     : Scan the provided image
    example  : opeanf/oaf
    mandatory: false
  - name     : options
    desc     : Extra options to provide to trivy
    example  : --insecure
    mandatory: false
  - name     : nodocker
    desc     : Don't use trivy through docker (defaults to false)
    example  : true
    mandatory: false
  - name     : noparse
    desc     : Don't parse trivy result (defaults to false)
    example  : true
    mandatory: false

todo:
- Select trivy usage mode
- name: Run trivy locally
  when: local
- name: Run trivy on a container
  when: docker

ojob:
  opacks      :
  - openaf: 20220822
  catch       : printErrnl("[" + job.name + "] "); if (isDef(exception.javaException)) exception.javaException.printStackTrace(); else printErr(exception)
  logToConsole: false   # to change when finished
        
jobsInclude:
- ojob.io/util/osArch

jobs:
# ------------------------------
- name : Select trivy usage mode
  from :
  - Is docker available
  check:
    in:
      nodocker: toBoolean.isBoolean.default(false)
  exec : |
    if (args.nodocker || !args.isDockerAvailable) {
      ow.oJob.setState("local")
    } else {
      ow.oJob.setState("docker")
    }

# ----------------------------
- name : Process trivy options
  check:
    in:
      options      : isString.default("")
      path         : isString.default(__)
      image        : isString.default(__)
      dockerOptions: isString.default("")
  exec : |
    // path
    if (isDef(args.path)) {
      if (ow.oJob.getState() == "docker") {
        args.dockerOptions += " -v " + io.fileInfo(args.path).canonicalPath + ":/path:ro"
        args.options += " fs /path"
      } else {
        args.options += " fs " + args.path
      }
    }

    if (isDef(args.image)) {
      if (args.image.endsWith(".tar")) {
        args.options += " image --input " + args.image
      } else {
        args.options += " image " + args.image
      }
    }

# ----------------------------------
- name : Install trivy temporarially
  exec : |
    args.trivyPath = io.createTempDir("trivy")  

    var arch = $job("Get current OS and Arch", { quiet: true })
    var res = $rest().get("https://api.github.com/repos/aquasecurity/trivy/releases")
    var res2 = $from($from(res)
                     .equals("draft", false)
                     .equals("prerelease", false)
                     .sort("-published_at")
                     .at(0)
                     .assets)

    switch(arch.os) {
    case "windows":
      throw "Windows is not supported."
      break
    case "macos"  :
      if (arch.arch == "arm") { 
        res2 = res2.contains("name", "macOS-ARM64").ends("name", ".tar.gz").at(0).browser_download_url
      } else {
        res2 = res2.contains("name", "macOS-64bit").ends("name", ".tar.gz").at(0).browser_download_url
      }
      break
    case "linux"  :
    default       :
      if (arch.arch == "arm") { 
        res2 = res2.contains("name", "Linux-ARM64").ends("name", ".tar.gz").at(0).browser_download_url
      } else {
        res2 = res2.contains("name", "Linux-64bit").ends("name", ".tar.gz").at(0).browser_download_url
      }
    }

    var tmp = io.createTempFile("trivy_", ".tar.gz", __, args.trivyPath)
    $rest().get2File(tmp, res2)

    $sh()
    .pwd(args.trivyPath)
    .sh("tar xzf " + tmp)
    .sh("rm " + tmp)
    .exec()

# ------------------------
- name : Run trivy locally
  from:
  - Process trivy options
  - Install trivy temporarially
  exec : |
    var res
    if (args.noparse) {
      $sh().pwd(args.trivyPath).sh("./trivy -f json " + args.options).exec()
    } else {
      res = $sh().pwd(args.trivyPath).sh("./trivy -f json " + args.options).getJson(0)
    }

    ow.oJob.output((isMap(res) && isMap(res.stdout) && res.exitcode == 0) ? res.stdout : res, args)

# -------------------------------
- name : Run trivy on a container
  from :
  - Process trivy options
  check:
    in:
      noparse: toBoolean.isBoolean.default(false)
  exec : |
    var res
    if (args.noparse) {
      $sh("docker run --rm " + args.dockerOptions + " aquasec/trivy -f json " + args.options).exec()
    } else {
      res = $sh("docker run --rm " + args.dockerOptions + " aquasec/trivy -f json " + args.options).getJson(0)
    }

    ow.oJob.output((isMap(res) && isMap(res.stdout) && res.exitcode == 0) ? res.stdout : res, args)