# Author: Nuno Aguiar
help:
  text   : Gets/Sets OpenAF's sBuckets.
  expects: 
  - name   : op
    desc   : "Provides the operation to perform: list; getbucket; setbucket; unsetbucket; set; setfn; setobj; setmap; unset"
    example: list
  - name   : secrepo
    desc   : The sBucket security repository (or don't define for default)
  - name   : secbucket
    desc   : The sBucket security bucket.
  - name   : seckey
    desc   : The sBucket security bucket key.
  - name   : bucket
    desc   : The bucket string when op=setbucket
  - name   : mapEntries
    desc   : When op=setmap you can provide a list of map entries separated by commas
    example: host,port,login,pass

todo:
- Choose operation

ojob:
  opacks      :
  - openaf: 20210327
  - oJob-common
  catch       : logErr(exception);
  logToConsole: false   # to change when finished

include:
- ojob.yaml

jobs:
# -----------------
- name : Set format
  exec : |
    if (args.op.toLowerCase() == "getbucket") args.__format = "yaml"
    if (isUnDef($get(args.__key))) $set(args.__key, {})

# -----------------------
- name : Choose operation
  check:
    in:
      op: isString
  to   : 
  - ojob options
  - Set format
  - ojob output
  args :
    __key      : out
    __optionOn : op
    __lowerCase: true
    __todos    :
      list       : SBucket List
      getbucket  : SBucket Get Bucket
      setbucket  : SBucket Set Bucket
      unsetbucket: SBucket UnSet Bucket
      setfn      : SBucket SetFn
      setmap     : SBucket SetMap
      set        : SBucket Set
      get        : SBucket Get
      setobj     : SBucket SetObj
      unset      : SBucket UnSet
  exec: |
    if (isDef(args.secrepo) && String(args.secrepo).length > 0) {
      args.secmainpass = askDef(args.secmainpass, "Sec repo '" + args.secrepo + "' pass: ", true);
    }

# -------------------
- name : SBucket List
  check:
    in:
      secbucket: isString.default(__)
  exec : |
    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secpass = askDef(args.secpass, "Sec bucket '" + args.secbucket + "' pass: ", true)
    }
    if (isDef(args.secbucket)) {
      args.output = $sec(args.secrepo, __, __, args.secmainpass).list(args.secbucket, args.secpass)
      if (isDef(args.output[args.secbucket])) args.output = args.output[args.secbucket].sort()
    } else {
      args.output = Object.keys($sec(args.secrepo, __, __, args.secmainpass).list()).sort()
    }

    $set("out", args.output)

# -----------------
- name: SBucket Get
  exec: |
    args.secbucket = _$(askDef(args.secbucket, "Sec bucket: "), "secbucket").$_()
    args.seckey    = _$(askDef(args.seckey, "Sec key: "), "seckey").$_()
    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secpass = askDef(args.secpass, "Sec bucket '" + args.secbucket + "' pass: ", true)
    }
    args.output = $sec(args.secrepo, __, __, args.secmainpass).get(args.seckey, args.secbucket, args.secpass)
    $set("out", args.output)

# -------------------
- name: SBucket GetFn
  exec: |
    args.secbucket = _$(askDef(args.secbucket, "Sec bucket: "), "secbucket").$_()
    args.seckey    = _$(askDef(args.seckey, "Sec key: "), "seckey").$_()
    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secpass = askDef(args.secpass, "Sec bucket '" + args.secbucket + "' pass: ", true)
    }
    args.output = $sec(args.secrepo, __, __, args.secmainpass).getFn(args.seckey, args.secargs, args.secbucket, args.secpass)

    $set("out", args.output)

# -----------------
- name: SBucket Set
  exec: |
    args.secbucket = _$(askDef(args.secbucket, "Sec bucket: "), "secbucket").$_()
    args.seckey    = _$(askDef(args.seckey, "Sec key: "), "seckey").$_()

    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secpass = askDef(args.secpass, "Sec bucket '" + args.secbucket + "' pass: ", true)
    }
    args.secargs = askDef(args.secargs, " value: ")
    var t = jsonParse(args.secargs, true);
    if (isMap(t)) args.secargs = t

    log("Setting '" + args.seckey + "' on bucket '" + args.secbucket + "'...")
    
    $sec(args.secrepo, __, __, args.secmainpass).set(args.seckey, args.secargs, args.secbucket, args.secpass)

# -------------------
- name: SBucket UnSet
  exec: |
    args.secbucket = _$(askDef(args.secbucket, "Sec bucket: "), "secbucket").$_()
    args.seckey    = _$(askDef(args.seckey, "Sec key: "), "seckey").$_()

    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secpass = askDef(args.secpass, "Sec bucket '" + args.secbucket + "' pass: ", true)
    }

    log("Unsetting '" + args.seckey + "' on bucket '" + args.secbucket + "'...")

    $sec(args.secrepo, __, __, args.secmainpass).unset(args.seckey, args.secbucket, args.secpass)

# --------------------
- name: SBucket SetMap
  exec: |
    args.secbucket = _$(askDef(args.secbucket, "Sec bucket: "), "secbucket").$_()
    args.seckey    = _$(askDef(args.seckey, "Sec key: "), "seckey").$_()

    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secpass = askDef(args.secpass, "Sec bucket '" + args.secbucket + "' pass: ", true)
    }
    if (isUnDef(args.mapEntries)) {
      args.mapEntries = ask("Provide map entries divided by commas: ")
    }

    var entries = {};
    _$(args.mapEntries, "mapEntries").isString().$_()

    args.mapEntries.trim().split(/ *, */).forEach(entry => {
      if (entry.indexOf("secret") >= 0 || entry.indexOf("pass") >= 0 || entry.indexOf("password") >= 0) {
        $$(entries).set(entry, askEncrypt("  " + entry + ": "))
      } else {
        $$(entries).set(entry, askDef(__, " " + entry + ": ", false, true))
      }
    });

    if (args.secrepo == "system" && args.secbucket == "envs") {
      print("Set a '" + args.seckey + "' environment variable with: '" + stringify(entries, __, "") + "'")
    } else {
      log("Setting '" + args.seckey + "' with entries (" + args.mapEntries + ") on bucket '" + args.secbucket + "'...")
      $sec(args.secrepo, __, __, args.secmainpass).set(args.seckey, entries, args.secbucket, args.secpass)
    }

# --------------------
- name: SBucket SetObj
  exec: |
    args.secbucket = _$(askDef(args.secbucket, "Sec bucket: "), "secbucket").$_()
    args.seckey    = _$(askDef(args.seckey, "Sec key: "), "seckey").$_()

    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secpass = askDef(args.secpass, "Sec bucket '" + args.secbucket + "' pass: ", true)
    }
    if (isUnDef(args.secobj)) {
      args.secobj = ask("Sec Obj: ")
    }
    try {
      log("Trying to find help odoc for '" + args.secobj + "'...")
      var ags, hsearch
      try {
        ags = $fnDef4Help(args.secobj)
        hsearch = searchHelp(args.secobj)
      } catch(e) {
        ags = $fnDef4Help(args.secobj + "." + args.secobj)
        hsearch = searchHelp(args.secobj + "." + args.secobj)
      }
      if (isArray(hsearch) && hsearch.length > 0) args.secobj = hsearch[0].key
      if (args.secobj.match(/(\w+)\.(\1)/)) {
        args.secobj = args.secobj.substr(0, args.secobj.indexOf("."))
      }

      if (isArray(ags)) {
        if (isArray(hsearch) && hsearch.length > 0) {
          print("-- " + hsearch[0].fullkey + "\n-- " + (repeat(hsearch[0].fullkey.length, "-")) + "\n-- " + hsearch[0].text + "\n")
        } else {
          print("\n" + args.secobj + "(" + ags.join(", ") + ")")
        }
        args.secargs = {}
        for(var param in ags) {
          var agss = ags[param].toLowerCase().trim()
          if (agss.indexOf("secret") >= 0 || agss.indexOf("pass") >= 0 || agss.indexOf("password") >= 0)
            args.secargs[ags[param]] = askEncrypt(" " + ags[param] + ": ")
          else
            args.secargs[ags[param]] = askDef(__, " " + ags[param] + ": ", false, true)
        }
        print("")
      }
    } catch(e) {
    }

    if (args.secrepo == "system" && args.secbucket == "envs") {
      print("Set a '" + args.seckey + "' environment variable with: '" + stringify({
        _obj : args.secobj,
        _args: args.secargs
      }, __, "") + "'")
    } else {
      log("Setting object '" + args.seckey + "' with arguments for '" + args.secobj + "' on bucket '" + args.secbucket + "'...")
      $sec(args.secrepo, __, __, args.secmainpass).setObj(args.seckey, args.secobj, args.secargs, args.secbucket, args.secpass)
    }
    
# -------------------
- name: SBucket SetFn
  exec: |
    args.secbucket = _$(askDef(args.secbucket, "Sec bucket: "), "secbucket").$_()
    args.seckey    = _$(askDef(args.seckey, "Sec key: "), "seckey").$_()

    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secpass = askDef(args.secpass, "Sec bucket '" + args.secbucket + "' pass: ", true)
    }
    if (isUnDef(args.secfn)) {
      args.secfn = ask("Sec Fn: ")
    }
    try {
      log("Trying to find help odoc for '" + args.secfn + "'...")
      var ags = $fnDef4Help(args.secfn)
      if (args.secfn.match(/(\w+)\.(\1)/)) {
        args.secfn = args.secfn.substr(0, args.secfn.indexOf("."))
      }
      if (isArray(ags)) {
        print("\n" + args.secfn + "(" + ags.join(", ") + ")")
        args.secargs = {}
        for(var param in ags) {
          var agss = ags[param].toLowerCase().trim()
          if (agss.indexOf("secret") >= 0 || agss.indexOf("pass") >= 0 || agss.indexOf("password") >= 0)
            args.secargs[ags[param]] = askEncrypt(" " + ags[param] + ": ")
          else
            args.secargs[ags[param]] = askDef(__, " " + ags[param] + ": ", false, true)
        }
        print("")
      }
    } catch(e) {
    }
    
    if (args.secrepo == "system" && args.secbucket == "envs") {
      print("Set a '" + args.seckey + "' environment variable with: '" + stringify({
        _fn  : args.secfn,
        _args: args.secargs
      }, __, "") + "'")
    } else {
      log("Setting '" + args.seckey + "' with arguments for '" + args.secfn + "' on bucket '" + args.secbucket + "'...")
      $sec(args.secrepo, __, __, args.secmainpass).setFn(args.seckey, args.secfn, args.secargs, args.secbucket, args.secpass)
    }
    
# ------------------------
- name: SBucket Get Bucket
  exec: |
    args.secbucket = _$(askDef(args.secbucket, "Sec bucket: "), "secbucket").$_()
    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secpass = askDef(args.secpass, "Sec bucket '" + args.secbucket + "' pass: ", true)
    }
    args.output = $sec(args.secrepo, __, __, args.secmainpass).getBucket(args.secbucket, args.secpass)
    $set("out", args.output)

# ------------------------s
- name: SBucket Set Bucket
  exec: |
    args.secbucket = _$(askDef(args.secbucket, "Sec bucket: "), "secbucket").$_()
    args.bucket    = _$(askDef(args.bucket, "Bucket data: "), "bucket").$_()
    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secpass = askDef(args.secpass, "Sec bucket '" + args.secbucket + "' pass: ", true)
    }
    $sec(args.secrepo, __, __, args.secmainpass).setBucket(args.bucket, args.secbucket, args.secpass)

# --------------------------
- name: SBucket UnSet Bucket
  exec: |
    args.secbucket = _$(askDef(args.secbucket, "Sec bucket: "), "secbucket").$_()
    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secpass = askDef(args.secpass, "Sec bucket '" + args.secbucket + "' pass: ", true)
    }

    $sec(args.secrepo, __, __, args.secmainpass).unsetBucket(args.secbucket, args.secpass)