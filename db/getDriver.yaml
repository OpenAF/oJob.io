# Author: Nuno Aguiar
help: 
  text   : Builds and optionally install an oPack with a specific JDBC driver  
  expects: 
  - name   : op
    desc   : The operation to be performed (e.g. list; install; build; builddir)
    example: list
  - name   : db
    desc   : The db to install or build (use op=list to check the possible values)

init:
  code: |
    (function() {
      var LIB_PATH = (isDef(getOPackPaths()["jdbc-{{name}}"]) ? getOPackPaths()["jdbc-{{name}}"]+"/" : ".");
      if (Object.keys(Packages.{{class}}).length <= 2) {
          delete Packages.{{class}};
          $from(io.listFiles(LIB_PATH).files).ends("filename", ".jar").select(function(r) {
              af.externalAddClasspath("file:///" + r.canonicalPath.replace(/\\/g, "/"));
          });
          if (isNull(Packages.openaf.core.DB.drivers.get("{{urlPrefix}}"))) {
            Packages.openaf.core.DB.drivers.put("{{urlPrefix}}", "{{class}}");
          }
      }

      global.DB{{name}} = function(aURL, aUser, aPass, aTimeout) {
          _$(aURL).isString().$_("Missing aURL ({{{url}}}) (docs: {{docs}})");

          // Docs: {{docs}}
          // URL : {{{url}}}
          return new DB("{{class}}", aURL, aUser, aPass, aTimeout);
      }
    })();

  data:
    drivers:
    # OpenDistro for ElasticSearch
    - name    : opendistro
      type    : maven
      typeArgs:
        groupId   : org.opensearch.driver
        artifactId: opensearch-sql-jdbc
      class   : org.opensearch.jdbc.Driver
      docs    : https://github.com/opensearch-project/sql-jdbc?tab=readme-ov-file
      url     : jdbc:opensearch://{{scheme://}}{{host}}{{port}}

    # Microsoft SQL Server
    - name    : sqlserver
      type    : maven
      typeArgs:
        groupId   : com.microsoft.sqlserver
        artifactId: mssql-jdbc
        version   : 9.2.1.jre8
      class   : com.microsoft.sqlserver.jdbc.SQLServerDriver
      docs    : https://docs.microsoft.com/en-us/sql/connect/jdbc/microsoft-jdbc-driver-for-sql-server
      url     : jdbc:sqlserver://{{server}}:{{port}};databaseName={{databaseName}}

    # Microsoft Access (UCanAccess)
    - name    : mdb
      type    : maven
      typeArgs:
        groupId   : net.sf.ucanaccess
        artifactId: ucanaccess
        version   : 5.0.1
        others    :
        - groupId   : com.healthmarketscience.jackcess
          artifactId: jackcess
          version   : 3.0.1
        - groupId   : org.hsqldb
          artifactId: hsqldb
          version   : 2.5.0
      class    : net.ucanaccess.jdbc.UcanaccessDriver
      docs     : http://ucanaccess.sourceforge.net/site.html
      url      : jdbc:ucanaccess://{{file}};memory=false

    # HSQLDB
    - name    : hsqldb
      type    : maven
      typeArgs:
        groupId   : org.hsqldb
        artifactId: hsqldb
      class   : org.hsqldb.jdbc.JDBCDriver
      docs    : http://hsqldb.org/doc/2.0/guide/dataaccess-chapt.html#dac_jdbc_overview
      url     : jdbc:hsqldb:{{file}}

    # H2
    - name    : h2
      type    : maven
      typeArgs:
        groupId   : com.h2database
        artifactId: h2
      class   : org.h2.Driver
      docs    : http://www.h2database.com/html/cheatSheet.html
      url     : jdbc:h2:{{file}}

    # PostgreSQL
    - name    : postgresql
      type    : maven
      typeArgs:
        groupId   : org.postgresql
        artifactId: postgresql
      class   : org.postgresql.Driver
      docs    : https://jdbc.postgresql.org/documentation/head/connect.html
      url     : jdbc:postgresql://{{host}}:{{port}}/{{database}} 

    # Oracle
    - name    : oracle
      type    : maven
      typeArgs:
        groupId   : com.oracle.database.jdbc 
        artifactId: ojdbc8
      class   : oracle.jdbc.OracleDriver
      docs    : https://docs.oracle.com/en/database/oracle/oracle-database/19/jajdb/oracle/jdbc/OracleDriver.html
      url     : jdbc:oracle:{{type}}:@{{host}}:{{port}}:{{database}}

    # MySQL
    - name    : mysql
      type    : maven
      typeArgs:
        groupId   : com.mysql
        artifactId: mysql-connector-j
      class   : com.mysql.cj.jdbc.Driver
      docs    : https://dev.mysql.com/doc/connector-j/en/connector-j-reference-jdbc-url-format.html
      url     : jdbc:mysql://{{host}}:{{port}}/{{database}}

    # MariaDB
    - name    : mariadb
      type    : maven
      typeArgs:
        groupId   : org.mariadb.jdbc
        artifactId: mariadb-java-client
      class   : org.mariadb.jdbc.Driver
      docs    : https://mariadb.com/kb/en/about-mariadb-connector-j
      url     : jdbc:mariadb://{{host}}:{{port}}/{{database}}

    # YugaByteDB
    - name    : yugabytedb
      type    : maven
      typeArgs:
        groupId   : com.yugabyte
        artifactId: jdbc-yugabytedb
      class   : org.postgresql.Driver
      docs    : https://github.com/yugabyte/jdbc-yugabytedb
      url     : jdbc:postgresql://{{host}}:{{port}}/{{database}} 

    # SQLite
    - name    : sqlite
      type    : maven
      typeArgs:
        groupId   : org.xerial
        artifactId: sqlite-jdbc
      class   : org.sqlite.JDBC
      docs    : https://github.com/xerial/sqlite-jdbc
      url     : jdbc:sqlite:{{file}}

    # DB2
    - name    : db2
      type    : maven
      typeArgs:
        groupId   : com.ibm.db2
        artifactId: jcc
      class   : com.ibm.db2.jcc.DB2Driver
      docs    : https://www.ibm.com/docs/en/db2/11.5?topic=cdsudidsdjs-url-format-data-server-driver-jdbc-sqlj-type-4-connectivity
      url     : jdbc:db2://{{server}}:{{port}}/{{database}}

    # Apache Drill
    - name    : drill
      type    : maven
      typeArgs:
        groupId   : org.apache.drill.exec
        artifactId: drill-jdbc-all
      class   : org.apache.drill.jdbc.Driver
      docs    : https://drill.apache.org/docs/using-the-jdbc-driver
      url     : jdbc:drill:zk={{host}}:{{port}}/{{directory}}/{{clusterId}}

    # Trino
    - name    : trino
      type    : maven
      typeArgs:
        groupId   : io.trino
        artifactId: trino-jdbc
      class   : io.trino.jdbc.TrinoDriver
      docs    : https://trino.io/docs/current/client/jdbc.html
      url     : jdbc:trino:{{host}}:{{port}}/{{catalog}}/{{schema}}

    # Presto
    - name    : presto
      type    : maven
      typeArgs:
        groupId   : com.facebook.presto
        artifactId: presto-jdbc
      class   : com.facebook.presto.jdbc.PrestoDriver
      docs    : https://prestodb.io/docs/current/installation/jdbc.html
      url     : jdbc:presto:{{host}}:{{port}}/{{catalog}}/{{schema}}

    # Paradox
    - name    : paradox
      type    : maven
      typeArgs:
        groupId   : com.googlecode.paradoxdriver
        artifactId: paradoxdriver
      class   : com.googlecode.paradox.Driver
      docs    : https://github.com/leonhad/paradoxdriver
      url     : jdbc:paradox:{{path}}

    # ODBC
    - name    : odbc
      type    : maven
      typeArgs:
        groupId   : com.oracle.database.jdbc
        artifactId: ojdbc8
      class   : sun.jdbc.odbc.JdbcOdbcDriver
      docs    : https://www.oracle.com/database/technologies/maven-central-guide.html
      url     : jdbc:odbc:{{db}}

    # CouchBaseAnalytics
    - name    : couchbaseanalytics
      type    : maven
      typeArgs:
        groupId   : com.couchbase.client
        artifactId: couchbase-jdbc-driver
      class   : com.couchbase.client.jdbc.CouchbaseDriver
      docs    : https://github.com/couchbaselabs/couchbase-jdbc-driver
      url     : jdbc:couchbase:analytics:{{host}}/{{catalog}}/{{schema}}

    # CouchBase
    - name    : couchbase
      type    : maven
      typeArgs:
        groupId   : com.couchbase.jdbc
        artifactId: jdbc-n1ql
      class   : com.couchbase.jdbc.CBDriver
      docs    : https://github.com/jdbc-json/jdbc-cb
      url     : jdbc:couchbase://{{host}}:{{port}}

    # CSV
    - name    : csv
      type    : maven
      typeArgs:
        groupId   : org.xbib.jdbc
        artifactId: jdbc-driver-csv
      class   : org.xbib.jdbc.csv.CsvDriver
      docs    : https://github.com/jprante/jdbc-driver-csv
      url     : jdbc:xbib:csv:{{folder}}

    # DuckDB
    - name    : duckdb
      type    : maven
      typeArgs:
        groupId   : org.duckdb
        artifactId: duckdb_jdbc
      class   : org.duckdb.DuckDBDriver
      docs    : https://github.com/duckdb/duckdb-java
      url     : jdbc:duckdb:{{file}}

todo:
- Get Drivers

ojob:
  opacks      :
  - openaf: 20240318
  catch       : &CATCH printErrnl("[" + job.name + "] "); if (isDef(exception.javaException)) exception.javaException.printStackTrace(); else printErr(exception)
  logToConsole: true   # to change when finished
        

jobs:
# ------------------
- name : Build oPack
  exec : |
    _$(args.db, "db")
    .oneOf(args.init.data.drivers.map(r => r.name), "Please choose on of the listed dbs (use op=list)")
    .$_()

    var db = $from(args.init.data.drivers).equals("name", args.db).at(0);
    if (isDef(db)) {
      var target = "jdbc-" + db.name;
      io.mkdir(target);

      // Get maven files
      if (db.type == "maven") {
        var lst = [ db.typeArgs ];
        if (isDef(db.typeArgs.others)) lst = lst.concat(db.typeArgs.others);

        ow.loadJava();
        var m = new ow.java.maven();
        lst.forEach(d => {
          log("Downloading " + d.groupId + "." + d.artifactId + "...");
          if (isDef(d.version)) {
            m.getFileVersion(d.groupId + "." + d.artifactId, d.artifactId + "-{{version}}.jar", d.version, target );
          } else {
            m.getFile(d.groupId + "." + d.artifactId, d.artifactId + "-{{version}}.jar", target )
          }
          try { 
            m.getLicenseByVersion(d.groupId + "." + d.artifactId, d.artifactId + "-{{version}}.jar", d.version, target );
          } catch(e) { }
        });
      }

      // Generate script
      log("Generating helper lib " + target + ".js ...");
      db.urlPrefix = db.url.replace(/(jdbc:\w+:).+$/, "$1");
      io.writeFileString(target + "/" + target + ".js", templify(args.init.code, db));

      log("Generating opack...");
      ow.loadFormat();

      var prev = io.fileExists(target + "/.package.yaml"), filesHash, prevEqual = false
      if (prev) {
        filesHash = io.readFileYAML(target + "/.package.yaml").filesHash
      }
      $sh(ow.format.getJavaHome() + "/bin/java -jar " + getOpenAFJar() + " --opack -e \"genpack " + target + "\"").prefix("genpack").get(0);
      var pack = io.readFileYAML(target + "/.package.yaml");
      if (prev) {
        prevEqual = compare(filesHash, pack.filesHash)
        if (prevEqual) logWarn("No changes in the files. Not updating the version.")
      }
      pack.author = "ojob.io/db/jdbc";
      pack.keywords = [ "DB", "JDBC", db.name ];
      pack.description = "Wrapper for JDBC drivers of " + db.name;
      pack.name = "jdbc-" + db.name;
      pack.license = "Check the LICENSES.txt file";
      if (!prevEqual) pack.version = ow.format.fromDate(new Date(), "yyyyMMdd");
      pack.repository = {};
      pack.dependencies = { openaf: ">=20240318" };
      pack.scripts.postinstall = `log("Check ${db.docs}. To use it just: loadLib(\\\"${target}.js\\\"); var db = new DB(\\\"${db.url}\\\", ...) ");`
      pack.files = pack.files.sort()
      pack.filesHash = sortMapKeys(pack.filesHash)
      io.writeFileYAML(target + "/.package.yaml", pack);

      if (!args.dir) {
        $sh(ow.format.getJavaHome() + "/bin/java -jar " + getOpenAFJar() + " --opack -e \"pack " + target + "\"").prefix("pack").get(0)
        io.rm(target)
      }

      if (args.install) {
        var f = io.listFilenames(".").filter(r => r.indexOf(target) >= 0);
        if (f.length > 0) {
          log("Installing opack " + f[0] + "...");
          $sh(getOpenAFPath() + "/opack install " + f[0] + " -force").prefix("install").get(0);
        }
      }

      log("To use it just:\n\n\tloadLib(\"" + target + ".js\");\n\tvar db = new DB(\"" + db.url + "\", ...)\n");
    }


# ------------------
- name : Get Drivers
  check:
    in: 
      op: oneOf(["list", "install", "build", "builddir"])
  exec : |
    var res = {};

    switch(args.op.trim().toLowerCase()) {
    case "build"   : $job("Build oPack", args); break
    case "builddir": $job("Build oPack", merge({ dir: true }, args)); break
    case "install" : $job("Build oPack", merge({ install: true }, args)); break
    case "list"    : res = $from(args.init.data.drivers).sort("name").select(r => ({ db: r.name })); break
    default        : break
    }

    ow.oJob.output(res, args);

