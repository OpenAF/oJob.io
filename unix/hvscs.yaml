# Author: Nuno Aguiar
help:
  text   : Manages hVSCs on the local host
  expects:
  - name     : op
    desc     : Operation to perform (e.g. list, create, delete)
    example  : list
    mandatory: false
  - name     : name
    desc     : When creating or deleting the hVSCs name
    example  : test
    mandatory: false
  - name     : image
    desc     : The hVSCs image to use (defaults to nmaguiar/hvscs)
    example  : false
    mandatory: false
  - name     : mac
    desc     : If mac=true the host is a Mac OS server
    example  : true
    mandatory: false
  - name     : volume
    desc     : If defined a container volume to mount as /workspace on op=create
    example  : /home/user/volume
    mandatory: false
  - name     : host
    desc     : The hostname to use for URLs
    example  : 1.2.3.4
    mandatory: false

init:
  dockHVSCS: |
    docker run --rm -ti --init -d -p 3000 -p {{sshPort}}:22 --privileged {{{extra}}} {{{wkspVolume}}} --network {{network}} --name {{name}}_hvscs {{image}}
  dockNginx: |
    docker run --rm -ti -d -p {{webPort}}:80 --network {{network}} --name {{name}}_nginx openaf/oaf:nightly -c '$sh("sudo apk update && sudo apk add nginx && ojob ojob.io/docker/nginx url=http://{{name}}_hvscs:3000 port={{webPort}} websocket=true  ssl=hvscs sslvalid=525600 && sudo mv nginx.conf /etc/nginx/nginx.conf  && sudo mv nginx.pem /etc/nginx.pem && sudo mv nginx.key /etc/nginx.key && echo --- && sudo nginx && tail -f /var/log/nginx/access.log").exec()'
  dockNet  : |
    docker network create {{network}}

todo:
- name: ojob state
  args:
    stateOn    : op
    lowerCase  : true
    validStates:
    - list
    - create
    - delete
    default    : list

- name: List
  when: list
- name: Create
  when: create
- name: Delete
  when: delete

ojob:
  opacks      :
  - openaf: 20211229
  - oJob-common
  catch       : if (isDef(exception.javaException)) exception.javaException.printStackTrace(); else printErr(exception)
  logToConsole: false   # to change when finished

include:
- ojob.yaml

jobs:
# ---------------
- name : Get data
  check:
    in:
      host: isString.default("127.0.0.1")
  exec : |
    // Get network
    $set("networks", $sh("docker network ls --format '{{json .}}'").get(0).stdout.split("\n").filter(r => r.length > 0).map(r => jsonParse(r)) )
    $set("dockers",  $sh("docker ps --format '{{json .}}'").get(0).stdout.split("\n").filter(r => r.length > 0).map(r => jsonParse(r)) )

    var nets = $from($get("networks"))
               .starts("Name", "hvscs_")
               .select(r => r.Name)

    var lst = []
    nets.forEach(net => {
      // Get dockers per network
      var dock = $from($get("dockers"))
                 .equals("Networks", net)
                 .select()

      var docks = []
      dock.forEach(d => {
        // Parse function
        d._name = d.Names.replace(net + "_", "")

        // Parse ports
        d._ports = []
        d.Ports.split(", ").forEach(port => {
          var m = port.match(/^(.+):(\d+)->(\d+)\/(\w+)$/)
          if (!isArray(m) && m.length < 5) return
          d._ports.push({
            host   : m[1],
            extPort: m[2],
            intPort: m[3],
            proto  : m[4]
          })
        })
        docks.push(d)
      })

      if (docks.length == 0) return

      var dm = {}
      dm.name = net.replace("hvscs_", "")
      $from(docks).equals("_name", dm.name + "_nginx").select(r => {
        $from(r._ports)
        .equals("intPort", 80)
        .select(s => { dm.webPort = s.extPort })
      })
      $from(docks).equals("_name", dm.name + "_hvscs").select(r => {
        $from(r._ports)
        .equals("intPort", 22)
        .select(s => { dm.sshPort = s.extPort })
        dm.image = r.Image
      })

      dm.webURL = "https://"+args.host+":" + dm.webPort + "/?folder=/workspace"
      dm.sshURL = "ssh://openvscode-server@"+args.host+":" + dm.sshPort

      lst.push(dm)
    })
    $set("list", lst)
    $set("res", lst)

# ===========
- name : List
  from : Get data
  to   : ojob output
  exec : |
    args.__format = _$(args.__format, "__format").default("table")

# -------------
- name : Create
  check:
    in:
      name  : isString
      image : isString.default("nmaguiar/hvscs")
      mac   : toBoolean.isBoolean.default(false)
      volume: isString.default(__)
  exec : |
    var d = {
      name      : args.name,
      isMac     : true,
      webPort   : findRandomOpenPort(),
      sshPort   : findRandomOpenPort(),
      extra     : args.mac ? "--cgroupns=host -v /sys/fs/cgroup:/sys/fs/cgroup:rw" : "",
      network   : "hvscs_" + args.name,
      wkspVolume: (isDef(args.volume) ? "-v " + args.volume + ":/workspace:cached" : ""),
      image     : args.image
    }

    print("Running " + templify(args.init.dockNet, d))
    $sh(templify(args.init.dockNet, d)).exec()

    print("Running " + templify(args.init.dockHVSCS, d))
    $sh(templify(args.init.dockHVSCS, d)).exec()

    print("Running " + templify(args.init.dockNginx, d))
    $sh(templify(args.init.dockNginx, d)).exec()

# -------------
- name : Delete
  from : Get data
  check:
    in:
      name: isString
  exec : |
    $sh("docker stop " + args.name + "_nginx").exec()
    $sh("docker stop " + args.name + "_hvscs").exec()
    $sh("docker network rm hvscs_" + args.name).exec()