# Author: Nuno Aguiar
help:
  text   : Generates a pyoaf script to execute python scripts with OpenAF.
  expects: 
  - name: example
    desc: If defined it will write an python example script on the filename provided (e.g. example.py)
    mandatory: false
  - name: python
    desc: If defined it will set the python interpreter to the provided string (e.g. python3)
    mandatory: false

init:
  scriptSh : |
    #!/bin/sh

    cmd="{{#if python}}ow.loadPython();ow.python.setPython(\"{{python}}\");{{/if}}\$pyStart();if (io.fileExists(\"$1\")) \$py(\"$1\", { params: processExpr(\" \", false, \"$@\") });\$pyStop()"
    "{{javaHome}}/bin/java" {{{jvmArgs}}} -jar "{{openafJAR}}" -c "$cmd"

  scriptBat: |
    @echo off

    set cmd="{{#if python}}ow.loadPython();ow.python.setPython('{{python}}');{{/if}}$pyStart();if(io.fileExists('%1'))$py('%1',{params:processExpr('\ ',false,'%*')});$pyStop()"
    "{{javaHome}}\bin\java.exe" {{{jvmArgs}}} -jar "{{openafJAR}}" -c %cmd%
    
  example  : |
    #!/usr/bin/env {{script}}
    import json

    oafVersion = _('getVersion()')
    oafPath    = _('getOpenAFPath()')
    pythonVer  = _('String(ow.python.version)')
    
    print('Running from python... and using...\n')
    print('OpenAF version: ' + oafVersion )
    print('OpenAF path   : ' + oafPath )
    print('Python version: ' + pythonVer )
    print('Command line  : ' + json.dumps(params, indent=3, separators=(',',':') ) )

todo:
- Generate pyOAF

ojob:
  opacks      :
  - openaf: 20200523
  catch       : logErr(exception);
  logToConsole: false   # to change when finished

jobs:
# --------------------
- name: Generate pyOAF
  exec: |
    ow.loadFormat();

    if (ow.format.isWindows()) {
      var script = getOpenAFPath() + "pyoaf.bat";
      io.writeFileString(script, templify(args.init.scriptBat, {
        javaHome : ow.format.getJavaHome(),
        openafJAR: getOpenAFJar(),
        python   : args.python,
        jvmArgs  : af.fromJavaArray(java.lang.management.ManagementFactory.getRuntimeMXBean().getInputArguments()).join(" ")
      }));
      log("Generated script " + script);

      if (isDef(args.example)) {
        io.writeFileString(args.example, templify(args.init.example, {
          script: script
        }));
        log("Generated example " + args.example);
      }
    } else {
      var script = getOpenAFPath() + "pyoaf";
      if (io.fileExists("/usr/bin/python3") && isUnDef(args.python)) args.python = "/usr/bin/python3";
      io.writeFileString(script, templify(args.init.scriptSh, {
        javaHome : ow.format.getJavaHome(),
        openafJAR: getOpenAFJar(),
        python   : args.python,
        jvmArgs  : af.fromJavaArray(java.lang.management.ManagementFactory.getRuntimeMXBean().getInputArguments()).join(" ")
      }));
      $sh("chmod a+rx " + script).exec();
      log("Generated script " + script);

      if (isDef(args.example)) {
        io.writeFileString(args.example, templify(args.init.example, {
          script: script
        }));
        log("Generated example " + args.example);
      }
    }

