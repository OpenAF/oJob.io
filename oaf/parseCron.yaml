# Author: Nuno Aguiar
help:
  text   : Test the provided cron expression a provides a list of dates of occurrence.
  expects: 
  - name     : cron
    desc     : The cron expression to evaluate
    example  : "*/5 * * * *"
    mandatory: false
  - name     : next
    desc     : How many occurrences in the future to provide (default to 5)
    example  : "5"
    mandatory: false
  - name     : prev
    desc     : How many occurrences in the past to provide (default to 0)
    example  : "0"
    mandatory: false

todo:
- Evaluate cron

ojob:
  opacks      :
  - openaf: 20210515
  catch       : "logErr(exception);"
  logToConsole: false   # to change when finished
        

jobs:
# -------------------
- name: Evaluate cron
  exec: |
    args.cron = askDef(args.cron, "cron: ");
    args.next = parseInt( _$(args.next, "next").default("5") );
    args.prev = parseInt( _$(args.prev, "prev").default("0") );

    var res = { };
    ow.loadFormat();

    // Parse cron expression
    var parse = ow.format.cron.parse(args.cron);
    traverse(parse, (aK, aV, aP, aO) => {
      switch(aK) {
      case "d": aO["weekDay"] = aV; delete aO[aK]; break;
      case "M": aO["month"] = aV; delete aO[aK]; break;
      case "D": aO["monthDay"] = aV; delete aO[aK]; break;
      case "h": aO["hour"] = aV; delete aO[aK]; break;
      case "m": aO["minute"] = aV; delete aO[aK]; break;
      case "s": aO["second"] = aV; delete aO[aK]; break;
      }
    });
    res.cron = merge({ expression: args.cron }, parse);

    // Previous scheduled
    var prev = ow.format.cron.prevScheduled(args.cron, args.prev);
    if (isString(prev)) prev = [ prev ]; // Assume array even if reply is a single date
    if (isArray(prev)) {
      prev = prev.map((r, i) => ({
        date: r,
        diffNext: (i > 0 ? ow.format.elapsedTime(r, prev[i - 1]) : "")
      }));
      res.prev = prev.reverse();
    }

    // Next scheduled
    var next = ow.format.cron.nextScheduled(args.cron, args.next);
    if (isString(next)) next = [ next ]; // Assume array even if reply is a single date
    if (isArray(next)) {
      next = next.map((r, i) => ({
        date: r,
        diffPrev: (i > 0 ? ow.format.elapsedTime(r, next[i - 1]) : "")
      }));
      res.next = next;
    }

    // Set output 
    ow.oJob.output(res, args);
