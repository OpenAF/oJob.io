# Author: Nuno Aguiar
help: 
  text   : Setups scripts to call OpenAF unix commands (e.g. oaf, oafc, ojob, opack, etc...)
  expects: 
  - name     : UNINSTALL
    desc     : If equals 'true' it will just remove the symlinks (defaults to 'false')
    example  : "false"
    mandatory: false
  - name     : TARGET
    desc     : Where the scripts should be placed (defaults to '/usr/bin')
    example  : "/usr/bin"
    mandatory: false
  - name     : OPENAF_PATH
    desc     : An alternative path to an openaf installation folder (defaults to the current openaf folder)
    example  : /oaf
    mandatory: false

todo:
- name: Init
- name: Setup scripts for openaf
  args:
  - BIN: oaf
  - BIN: oaf-sb
  - BIN: ojob-sb
  - BIN: oafc
  - BIN: ojob
  - BIN: opack
  - BIN: openaf
  - BIN: openaf-console
  - BIN: openaf-sb

ojob:
  opacks      :
  - openaf: 20210515
  catch       : logErr(exception);
  logToConsole: true   # to change when finished

jobs:
# ----------
- name: Init
  exec: |
    ow.loadFormat(); ow.loadTemplate();

# -------------------
- name: Get variables
  exec: |
    if (isUnDef(args.TARGET) && ow.format.getOS().startsWith("Mac OS")) args.TARGET = "/usr/local/bin";

    args.OPENAF_PATH = _$(args.OPENAF_PATH, "OPENAF_PATH").default(getOpenAFPath());
    args.TARGET      = _$(args.TARGET, "TARGET").default("/usr/bin");
    args.UNINSTALL   = _$(args.UNINSTALL, "UNINSTALL").default("false");
     
    if (ow.format.isWindows()) throw "Not supported in Windows";
    if (args.OPENAF_PATH.endsWith("/")) args.OPENAF_PATH = args.OPENAF_PATH.substr(0, args.OPENAF_PATH.length - 1); 

# -------------------------------
- name: Setup scripts for openaf
  from: Get variables
  lang: shell
  exec: |
    echo Removing $TARGET/$BIN...
    rm $TARGET/$BIN 2> /dev/null
    if [ "$UNINSTALL" = "false" ]; then
       echo Setup $TARGET/$BIN...
       echo '#!/bin/sh' > $TARGET/$BIN
       echo "" >> $TARGET/$BIN
       echo "/bin/sh $OPENAF_PATH/$BIN \"\$@\"" >> $TARGET/$BIN
       chmod a+x $TARGET/$BIN
    fi
